/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val { byte | mask } else { byte & !mask }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize)
        };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe { Self::raw_set_bit(this, index + bit_offset, val_bit_is_set) };
        }
    }
}
pub const FT_OPEN_BY_SERIAL_NUMBER: u32 = 1;
pub const FT_OPEN_BY_DESCRIPTION: u32 = 2;
pub const FT_OPEN_BY_LOCATION: u32 = 4;
pub const FT_OPEN_MASK: u32 = 7;
pub const FT_LIST_NUMBER_ONLY: u32 = 2147483648;
pub const FT_LIST_BY_INDEX: u32 = 1073741824;
pub const FT_LIST_ALL: u32 = 536870912;
pub const FT_LIST_MASK: u32 = 3758096384;
pub const FT_BAUD_300: u32 = 300;
pub const FT_BAUD_600: u32 = 600;
pub const FT_BAUD_1200: u32 = 1200;
pub const FT_BAUD_2400: u32 = 2400;
pub const FT_BAUD_4800: u32 = 4800;
pub const FT_BAUD_9600: u32 = 9600;
pub const FT_BAUD_14400: u32 = 14400;
pub const FT_BAUD_19200: u32 = 19200;
pub const FT_BAUD_38400: u32 = 38400;
pub const FT_BAUD_57600: u32 = 57600;
pub const FT_BAUD_115200: u32 = 115200;
pub const FT_BAUD_230400: u32 = 230400;
pub const FT_BAUD_460800: u32 = 460800;
pub const FT_BAUD_921600: u32 = 921600;
pub const FT_FLOW_NONE: u32 = 0;
pub const FT_FLOW_RTS_CTS: u32 = 256;
pub const FT_FLOW_DTR_DSR: u32 = 512;
pub const FT_FLOW_XON_XOFF: u32 = 1024;
pub const FT_PURGE_RX: u32 = 1;
pub const FT_PURGE_TX: u32 = 2;
pub const FT_EVENT_RXCHAR: u32 = 1;
pub const FT_EVENT_MODEM_STATUS: u32 = 2;
pub const FT_EVENT_LINE_STATUS: u32 = 4;
pub const FT_DEFAULT_RX_TIMEOUT: u32 = 300;
pub const FT_DEFAULT_TX_TIMEOUT: u32 = 300;
pub const FT_BITMODE_RESET: u32 = 0;
pub const FT_BITMODE_ASYNC_BITBANG: u32 = 1;
pub const FT_BITMODE_MPSSE: u32 = 2;
pub const FT_BITMODE_SYNC_BITBANG: u32 = 4;
pub const FT_BITMODE_MCU_HOST: u32 = 8;
pub const FT_BITMODE_FAST_SERIAL: u32 = 16;
pub const FT_BITMODE_CBUS_BITBANG: u32 = 32;
pub const FT_BITMODE_SYNC_FIFO: u32 = 64;
pub const FT_232R_CBUS_TXDEN: u32 = 0;
pub const FT_232R_CBUS_PWRON: u32 = 1;
pub const FT_232R_CBUS_RXLED: u32 = 2;
pub const FT_232R_CBUS_TXLED: u32 = 3;
pub const FT_232R_CBUS_TXRXLED: u32 = 4;
pub const FT_232R_CBUS_SLEEP: u32 = 5;
pub const FT_232R_CBUS_CLK48: u32 = 6;
pub const FT_232R_CBUS_CLK24: u32 = 7;
pub const FT_232R_CBUS_CLK12: u32 = 8;
pub const FT_232R_CBUS_CLK6: u32 = 9;
pub const FT_232R_CBUS_IOMODE: u32 = 10;
pub const FT_232R_CBUS_BITBANG_WR: u32 = 11;
pub const FT_232R_CBUS_BITBANG_RD: u32 = 12;
pub const FT_232H_CBUS_TRISTATE: u32 = 0;
pub const FT_232H_CBUS_TXLED: u32 = 1;
pub const FT_232H_CBUS_RXLED: u32 = 2;
pub const FT_232H_CBUS_TXRXLED: u32 = 3;
pub const FT_232H_CBUS_PWREN: u32 = 4;
pub const FT_232H_CBUS_SLEEP: u32 = 5;
pub const FT_232H_CBUS_DRIVE_0: u32 = 6;
pub const FT_232H_CBUS_DRIVE_1: u32 = 7;
pub const FT_232H_CBUS_IOMODE: u32 = 8;
pub const FT_232H_CBUS_TXDEN: u32 = 9;
pub const FT_232H_CBUS_CLK30: u32 = 10;
pub const FT_232H_CBUS_CLK15: u32 = 11;
pub const FT_232H_CBUS_CLK7_5: u32 = 12;
pub const FT_X_SERIES_CBUS_TRISTATE: u32 = 0;
pub const FT_X_SERIES_CBUS_TXLED: u32 = 1;
pub const FT_X_SERIES_CBUS_RXLED: u32 = 2;
pub const FT_X_SERIES_CBUS_TXRXLED: u32 = 3;
pub const FT_X_SERIES_CBUS_PWREN: u32 = 4;
pub const FT_X_SERIES_CBUS_SLEEP: u32 = 5;
pub const FT_X_SERIES_CBUS_DRIVE_0: u32 = 6;
pub const FT_X_SERIES_CBUS_DRIVE_1: u32 = 7;
pub const FT_X_SERIES_CBUS_IOMODE: u32 = 8;
pub const FT_X_SERIES_CBUS_TXDEN: u32 = 9;
pub const FT_X_SERIES_CBUS_CLK24: u32 = 10;
pub const FT_X_SERIES_CBUS_CLK12: u32 = 11;
pub const FT_X_SERIES_CBUS_CLK6: u32 = 12;
pub const FT_X_SERIES_CBUS_BCD_CHARGER: u32 = 13;
pub const FT_X_SERIES_CBUS_BCD_CHARGER_N: u32 = 14;
pub const FT_X_SERIES_CBUS_I2C_TXE: u32 = 15;
pub const FT_X_SERIES_CBUS_I2C_RXF: u32 = 16;
pub const FT_X_SERIES_CBUS_VBUS_SENSE: u32 = 17;
pub const FT_X_SERIES_CBUS_BITBANG_WR: u32 = 18;
pub const FT_X_SERIES_CBUS_BITBANG_RD: u32 = 19;
pub const FT_X_SERIES_CBUS_TIMESTAMP: u32 = 20;
pub const FT_X_SERIES_CBUS_KEEP_AWAKE: u32 = 21;
pub const FT_DRIVER_TYPE_D2XX: u32 = 0;
pub const FT_DRIVER_TYPE_VCP: u32 = 1;
pub type ULONG = ::std::os::raw::c_ulong;
pub type PULONG = *mut ULONG;
pub type USHORT = ::std::os::raw::c_ushort;
pub type UCHAR = ::std::os::raw::c_uchar;
pub type PUCHAR = *mut UCHAR;
pub type DWORD = ::std::os::raw::c_ulong;
pub type BOOL = ::std::os::raw::c_int;
pub type BYTE = ::std::os::raw::c_uchar;
pub type WORD = ::std::os::raw::c_ushort;
pub type LPWORD = *mut WORD;
pub type LPLONG = *mut ::std::os::raw::c_long;
pub type LPDWORD = *mut DWORD;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type UINT = ::std::os::raw::c_uint;
pub type ULONG_PTR = ::std::os::raw::c_ulong;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type CHAR = ::std::os::raw::c_char;
pub type PCHAR = *mut CHAR;
pub type LPCSTR = *const CHAR;
pub type LPCTSTR = LPCSTR;
pub type HANDLE = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_ATTRIBUTES {
    pub nLength: DWORD,
    pub lpSecurityDescriptor: LPVOID,
    pub bInheritHandle: BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SECURITY_ATTRIBUTES"][::std::mem::size_of::<_SECURITY_ATTRIBUTES>() - 12usize];
    ["Alignment of _SECURITY_ATTRIBUTES"][::std::mem::align_of::<_SECURITY_ATTRIBUTES>() - 4usize];
    ["Offset of field: _SECURITY_ATTRIBUTES::nLength"]
        [::std::mem::offset_of!(_SECURITY_ATTRIBUTES, nLength) - 0usize];
    ["Offset of field: _SECURITY_ATTRIBUTES::lpSecurityDescriptor"]
        [::std::mem::offset_of!(_SECURITY_ATTRIBUTES, lpSecurityDescriptor) - 4usize];
    ["Offset of field: _SECURITY_ATTRIBUTES::bInheritHandle"]
        [::std::mem::offset_of!(_SECURITY_ATTRIBUTES, bInheritHandle) - 8usize];
};
impl Default for _SECURITY_ATTRIBUTES {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type LPSECURITY_ATTRIBUTES = *mut _SECURITY_ATTRIBUTES;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _OVERLAPPED {
    pub Internal: ULONG_PTR,
    pub InternalHigh: ULONG_PTR,
    pub __bindgen_anon_1: _OVERLAPPED__bindgen_ty_1,
    pub hEvent: HANDLE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _OVERLAPPED__bindgen_ty_1 {
    pub __bindgen_anon_1: _OVERLAPPED__bindgen_ty_1__bindgen_ty_1,
    pub Pointer: PVOID,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _OVERLAPPED__bindgen_ty_1__bindgen_ty_1 {
    pub Offset: DWORD,
    pub OffsetHigh: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OVERLAPPED__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of _OVERLAPPED__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: _OVERLAPPED__bindgen_ty_1__bindgen_ty_1::Offset"]
        [::std::mem::offset_of!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1, Offset) - 0usize];
    ["Offset of field: _OVERLAPPED__bindgen_ty_1__bindgen_ty_1::OffsetHigh"]
        [::std::mem::offset_of!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1, OffsetHigh) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OVERLAPPED__bindgen_ty_1"]
        [::std::mem::size_of::<_OVERLAPPED__bindgen_ty_1>() - 8usize];
    ["Alignment of _OVERLAPPED__bindgen_ty_1"]
        [::std::mem::align_of::<_OVERLAPPED__bindgen_ty_1>() - 4usize];
    ["Offset of field: _OVERLAPPED__bindgen_ty_1::Pointer"]
        [::std::mem::offset_of!(_OVERLAPPED__bindgen_ty_1, Pointer) - 0usize];
};
impl Default for _OVERLAPPED__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OVERLAPPED"][::std::mem::size_of::<_OVERLAPPED>() - 20usize];
    ["Alignment of _OVERLAPPED"][::std::mem::align_of::<_OVERLAPPED>() - 4usize];
    ["Offset of field: _OVERLAPPED::Internal"]
        [::std::mem::offset_of!(_OVERLAPPED, Internal) - 0usize];
    ["Offset of field: _OVERLAPPED::InternalHigh"]
        [::std::mem::offset_of!(_OVERLAPPED, InternalHigh) - 4usize];
    ["Offset of field: _OVERLAPPED::hEvent"][::std::mem::offset_of!(_OVERLAPPED, hEvent) - 16usize];
};
impl Default for _OVERLAPPED {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type LPOVERLAPPED = *mut _OVERLAPPED;
pub type FT_HANDLE = PVOID;
pub type FT_STATUS = ULONG;
pub const FT_OK: _bindgen_ty_4 = 0;
pub const FT_INVALID_HANDLE: _bindgen_ty_4 = 1;
pub const FT_DEVICE_NOT_FOUND: _bindgen_ty_4 = 2;
pub const FT_DEVICE_NOT_OPENED: _bindgen_ty_4 = 3;
pub const FT_IO_ERROR: _bindgen_ty_4 = 4;
pub const FT_INSUFFICIENT_RESOURCES: _bindgen_ty_4 = 5;
pub const FT_INVALID_PARAMETER: _bindgen_ty_4 = 6;
pub const FT_INVALID_BAUD_RATE: _bindgen_ty_4 = 7;
pub const FT_DEVICE_NOT_OPENED_FOR_ERASE: _bindgen_ty_4 = 8;
pub const FT_DEVICE_NOT_OPENED_FOR_WRITE: _bindgen_ty_4 = 9;
pub const FT_FAILED_TO_WRITE_DEVICE: _bindgen_ty_4 = 10;
pub const FT_EEPROM_READ_FAILED: _bindgen_ty_4 = 11;
pub const FT_EEPROM_WRITE_FAILED: _bindgen_ty_4 = 12;
pub const FT_EEPROM_ERASE_FAILED: _bindgen_ty_4 = 13;
pub const FT_EEPROM_NOT_PRESENT: _bindgen_ty_4 = 14;
pub const FT_EEPROM_NOT_PROGRAMMED: _bindgen_ty_4 = 15;
pub const FT_INVALID_ARGS: _bindgen_ty_4 = 16;
pub const FT_NOT_SUPPORTED: _bindgen_ty_4 = 17;
pub const FT_OTHER_ERROR: _bindgen_ty_4 = 18;
pub const FT_DEVICE_LIST_NOT_READY: _bindgen_ty_4 = 19;
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
pub type FT_DEVICE = ULONG;
pub const FT_DEVICE_BM: _bindgen_ty_5 = 0;
pub const FT_DEVICE_AM: _bindgen_ty_5 = 1;
pub const FT_DEVICE_100AX: _bindgen_ty_5 = 2;
pub const FT_DEVICE_UNKNOWN: _bindgen_ty_5 = 3;
pub const FT_DEVICE_2232C: _bindgen_ty_5 = 4;
pub const FT_DEVICE_232R: _bindgen_ty_5 = 5;
pub const FT_DEVICE_2232H: _bindgen_ty_5 = 6;
pub const FT_DEVICE_4232H: _bindgen_ty_5 = 7;
pub const FT_DEVICE_232H: _bindgen_ty_5 = 8;
pub const FT_DEVICE_X_SERIES: _bindgen_ty_5 = 9;
pub const FT_DEVICE_4222H_0: _bindgen_ty_5 = 10;
pub const FT_DEVICE_4222H_1_2: _bindgen_ty_5 = 11;
pub const FT_DEVICE_4222H_3: _bindgen_ty_5 = 12;
pub const FT_DEVICE_4222_PROG: _bindgen_ty_5 = 13;
pub const FT_DEVICE_900: _bindgen_ty_5 = 14;
pub const FT_DEVICE_930: _bindgen_ty_5 = 15;
pub const FT_DEVICE_UMFTPD3A: _bindgen_ty_5 = 16;
pub const FT_DEVICE_2233HP: _bindgen_ty_5 = 17;
pub const FT_DEVICE_4233HP: _bindgen_ty_5 = 18;
pub const FT_DEVICE_2232HP: _bindgen_ty_5 = 19;
pub const FT_DEVICE_4232HP: _bindgen_ty_5 = 20;
pub const FT_DEVICE_233HP: _bindgen_ty_5 = 21;
pub const FT_DEVICE_232HP: _bindgen_ty_5 = 22;
pub const FT_DEVICE_2232HA: _bindgen_ty_5 = 23;
pub const FT_DEVICE_4232HA: _bindgen_ty_5 = 24;
pub const FT_DEVICE_232RN: _bindgen_ty_5 = 25;
pub type _bindgen_ty_5 = ::std::os::raw::c_int;
unsafe extern "stdcall" {
    pub fn FT_Open(deviceNumber: ::std::os::raw::c_int, pHandle: *mut FT_HANDLE) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_OpenEx(pArg1: PVOID, Flags: DWORD, pHandle: *mut FT_HANDLE) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_ListDevices(pArg1: PVOID, pArg2: PVOID, Flags: DWORD) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_Close(ftHandle: FT_HANDLE) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_Read(
        ftHandle: FT_HANDLE,
        lpBuffer: LPVOID,
        dwBytesToRead: DWORD,
        lpBytesReturned: LPDWORD,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_Write(
        ftHandle: FT_HANDLE,
        lpBuffer: LPVOID,
        dwBytesToWrite: DWORD,
        lpBytesWritten: LPDWORD,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_IoCtl(
        ftHandle: FT_HANDLE,
        dwIoControlCode: DWORD,
        lpInBuf: LPVOID,
        nInBufSize: DWORD,
        lpOutBuf: LPVOID,
        nOutBufSize: DWORD,
        lpBytesReturned: LPDWORD,
        lpOverlapped: LPOVERLAPPED,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_SetBaudRate(ftHandle: FT_HANDLE, BaudRate: ULONG) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_SetDivisor(ftHandle: FT_HANDLE, Divisor: USHORT) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_SetDataCharacteristics(
        ftHandle: FT_HANDLE,
        WordLength: UCHAR,
        StopBits: UCHAR,
        Parity: UCHAR,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_SetFlowControl(
        ftHandle: FT_HANDLE,
        FlowControl: USHORT,
        XonChar: UCHAR,
        XoffChar: UCHAR,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_ResetDevice(ftHandle: FT_HANDLE) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_SetDtr(ftHandle: FT_HANDLE) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_ClrDtr(ftHandle: FT_HANDLE) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_SetRts(ftHandle: FT_HANDLE) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_ClrRts(ftHandle: FT_HANDLE) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_GetModemStatus(ftHandle: FT_HANDLE, pModemStatus: *mut ULONG) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_SetChars(
        ftHandle: FT_HANDLE,
        EventChar: UCHAR,
        EventCharEnabled: UCHAR,
        ErrorChar: UCHAR,
        ErrorCharEnabled: UCHAR,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_Purge(ftHandle: FT_HANDLE, Mask: ULONG) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_SetTimeouts(
        ftHandle: FT_HANDLE,
        ReadTimeout: ULONG,
        WriteTimeout: ULONG,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_GetQueueStatus(ftHandle: FT_HANDLE, dwRxBytes: *mut DWORD) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_SetEventNotification(ftHandle: FT_HANDLE, Mask: DWORD, Param: PVOID) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_GetStatus(
        ftHandle: FT_HANDLE,
        dwRxBytes: *mut DWORD,
        dwTxBytes: *mut DWORD,
        dwEventDWord: *mut DWORD,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_SetBreakOn(ftHandle: FT_HANDLE) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_SetBreakOff(ftHandle: FT_HANDLE) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_SetWaitMask(ftHandle: FT_HANDLE, Mask: DWORD) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_WaitOnMask(ftHandle: FT_HANDLE, Mask: *mut DWORD) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_GetEventStatus(ftHandle: FT_HANDLE, dwEventDWord: *mut DWORD) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_ReadEE(ftHandle: FT_HANDLE, dwWordOffset: DWORD, lpwValue: LPWORD) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_WriteEE(ftHandle: FT_HANDLE, dwWordOffset: DWORD, wValue: WORD) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_EraseEE(ftHandle: FT_HANDLE) -> FT_STATUS;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ft_program_data {
    pub Signature1: DWORD,
    pub Signature2: DWORD,
    pub Version: DWORD,
    pub VendorId: WORD,
    pub ProductId: WORD,
    pub Manufacturer: *mut ::std::os::raw::c_char,
    pub ManufacturerId: *mut ::std::os::raw::c_char,
    pub Description: *mut ::std::os::raw::c_char,
    pub SerialNumber: *mut ::std::os::raw::c_char,
    pub MaxPower: WORD,
    pub PnP: WORD,
    pub SelfPowered: WORD,
    pub RemoteWakeup: WORD,
    pub Rev4: UCHAR,
    pub IsoIn: UCHAR,
    pub IsoOut: UCHAR,
    pub PullDownEnable: UCHAR,
    pub SerNumEnable: UCHAR,
    pub USBVersionEnable: UCHAR,
    pub USBVersion: WORD,
    pub Rev5: UCHAR,
    pub IsoInA: UCHAR,
    pub IsoInB: UCHAR,
    pub IsoOutA: UCHAR,
    pub IsoOutB: UCHAR,
    pub PullDownEnable5: UCHAR,
    pub SerNumEnable5: UCHAR,
    pub USBVersionEnable5: UCHAR,
    pub USBVersion5: WORD,
    pub AIsHighCurrent: UCHAR,
    pub BIsHighCurrent: UCHAR,
    pub IFAIsFifo: UCHAR,
    pub IFAIsFifoTar: UCHAR,
    pub IFAIsFastSer: UCHAR,
    pub AIsVCP: UCHAR,
    pub IFBIsFifo: UCHAR,
    pub IFBIsFifoTar: UCHAR,
    pub IFBIsFastSer: UCHAR,
    pub BIsVCP: UCHAR,
    pub UseExtOsc: UCHAR,
    pub HighDriveIOs: UCHAR,
    pub EndpointSize: UCHAR,
    pub PullDownEnableR: UCHAR,
    pub SerNumEnableR: UCHAR,
    pub InvertTXD: UCHAR,
    pub InvertRXD: UCHAR,
    pub InvertRTS: UCHAR,
    pub InvertCTS: UCHAR,
    pub InvertDTR: UCHAR,
    pub InvertDSR: UCHAR,
    pub InvertDCD: UCHAR,
    pub InvertRI: UCHAR,
    pub Cbus0: UCHAR,
    pub Cbus1: UCHAR,
    pub Cbus2: UCHAR,
    pub Cbus3: UCHAR,
    pub Cbus4: UCHAR,
    pub RIsD2XX: UCHAR,
    pub PullDownEnable7: UCHAR,
    pub SerNumEnable7: UCHAR,
    pub ALSlowSlew: UCHAR,
    pub ALSchmittInput: UCHAR,
    pub ALDriveCurrent: UCHAR,
    pub AHSlowSlew: UCHAR,
    pub AHSchmittInput: UCHAR,
    pub AHDriveCurrent: UCHAR,
    pub BLSlowSlew: UCHAR,
    pub BLSchmittInput: UCHAR,
    pub BLDriveCurrent: UCHAR,
    pub BHSlowSlew: UCHAR,
    pub BHSchmittInput: UCHAR,
    pub BHDriveCurrent: UCHAR,
    pub IFAIsFifo7: UCHAR,
    pub IFAIsFifoTar7: UCHAR,
    pub IFAIsFastSer7: UCHAR,
    pub AIsVCP7: UCHAR,
    pub IFBIsFifo7: UCHAR,
    pub IFBIsFifoTar7: UCHAR,
    pub IFBIsFastSer7: UCHAR,
    pub BIsVCP7: UCHAR,
    pub PowerSaveEnable: UCHAR,
    pub PullDownEnable8: UCHAR,
    pub SerNumEnable8: UCHAR,
    pub ASlowSlew: UCHAR,
    pub ASchmittInput: UCHAR,
    pub ADriveCurrent: UCHAR,
    pub BSlowSlew: UCHAR,
    pub BSchmittInput: UCHAR,
    pub BDriveCurrent: UCHAR,
    pub CSlowSlew: UCHAR,
    pub CSchmittInput: UCHAR,
    pub CDriveCurrent: UCHAR,
    pub DSlowSlew: UCHAR,
    pub DSchmittInput: UCHAR,
    pub DDriveCurrent: UCHAR,
    pub ARIIsTXDEN: UCHAR,
    pub BRIIsTXDEN: UCHAR,
    pub CRIIsTXDEN: UCHAR,
    pub DRIIsTXDEN: UCHAR,
    pub AIsVCP8: UCHAR,
    pub BIsVCP8: UCHAR,
    pub CIsVCP8: UCHAR,
    pub DIsVCP8: UCHAR,
    pub PullDownEnableH: UCHAR,
    pub SerNumEnableH: UCHAR,
    pub ACSlowSlewH: UCHAR,
    pub ACSchmittInputH: UCHAR,
    pub ACDriveCurrentH: UCHAR,
    pub ADSlowSlewH: UCHAR,
    pub ADSchmittInputH: UCHAR,
    pub ADDriveCurrentH: UCHAR,
    pub Cbus0H: UCHAR,
    pub Cbus1H: UCHAR,
    pub Cbus2H: UCHAR,
    pub Cbus3H: UCHAR,
    pub Cbus4H: UCHAR,
    pub Cbus5H: UCHAR,
    pub Cbus6H: UCHAR,
    pub Cbus7H: UCHAR,
    pub Cbus8H: UCHAR,
    pub Cbus9H: UCHAR,
    pub IsFifoH: UCHAR,
    pub IsFifoTarH: UCHAR,
    pub IsFastSerH: UCHAR,
    pub IsFT1248H: UCHAR,
    pub FT1248CpolH: UCHAR,
    pub FT1248LsbH: UCHAR,
    pub FT1248FlowControlH: UCHAR,
    pub IsVCPH: UCHAR,
    pub PowerSaveEnableH: UCHAR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ft_program_data"][::std::mem::size_of::<ft_program_data>() - 160usize];
    ["Alignment of ft_program_data"][::std::mem::align_of::<ft_program_data>() - 4usize];
    ["Offset of field: ft_program_data::Signature1"]
        [::std::mem::offset_of!(ft_program_data, Signature1) - 0usize];
    ["Offset of field: ft_program_data::Signature2"]
        [::std::mem::offset_of!(ft_program_data, Signature2) - 4usize];
    ["Offset of field: ft_program_data::Version"]
        [::std::mem::offset_of!(ft_program_data, Version) - 8usize];
    ["Offset of field: ft_program_data::VendorId"]
        [::std::mem::offset_of!(ft_program_data, VendorId) - 12usize];
    ["Offset of field: ft_program_data::ProductId"]
        [::std::mem::offset_of!(ft_program_data, ProductId) - 14usize];
    ["Offset of field: ft_program_data::Manufacturer"]
        [::std::mem::offset_of!(ft_program_data, Manufacturer) - 16usize];
    ["Offset of field: ft_program_data::ManufacturerId"]
        [::std::mem::offset_of!(ft_program_data, ManufacturerId) - 20usize];
    ["Offset of field: ft_program_data::Description"]
        [::std::mem::offset_of!(ft_program_data, Description) - 24usize];
    ["Offset of field: ft_program_data::SerialNumber"]
        [::std::mem::offset_of!(ft_program_data, SerialNumber) - 28usize];
    ["Offset of field: ft_program_data::MaxPower"]
        [::std::mem::offset_of!(ft_program_data, MaxPower) - 32usize];
    ["Offset of field: ft_program_data::PnP"]
        [::std::mem::offset_of!(ft_program_data, PnP) - 34usize];
    ["Offset of field: ft_program_data::SelfPowered"]
        [::std::mem::offset_of!(ft_program_data, SelfPowered) - 36usize];
    ["Offset of field: ft_program_data::RemoteWakeup"]
        [::std::mem::offset_of!(ft_program_data, RemoteWakeup) - 38usize];
    ["Offset of field: ft_program_data::Rev4"]
        [::std::mem::offset_of!(ft_program_data, Rev4) - 40usize];
    ["Offset of field: ft_program_data::IsoIn"]
        [::std::mem::offset_of!(ft_program_data, IsoIn) - 41usize];
    ["Offset of field: ft_program_data::IsoOut"]
        [::std::mem::offset_of!(ft_program_data, IsoOut) - 42usize];
    ["Offset of field: ft_program_data::PullDownEnable"]
        [::std::mem::offset_of!(ft_program_data, PullDownEnable) - 43usize];
    ["Offset of field: ft_program_data::SerNumEnable"]
        [::std::mem::offset_of!(ft_program_data, SerNumEnable) - 44usize];
    ["Offset of field: ft_program_data::USBVersionEnable"]
        [::std::mem::offset_of!(ft_program_data, USBVersionEnable) - 45usize];
    ["Offset of field: ft_program_data::USBVersion"]
        [::std::mem::offset_of!(ft_program_data, USBVersion) - 46usize];
    ["Offset of field: ft_program_data::Rev5"]
        [::std::mem::offset_of!(ft_program_data, Rev5) - 48usize];
    ["Offset of field: ft_program_data::IsoInA"]
        [::std::mem::offset_of!(ft_program_data, IsoInA) - 49usize];
    ["Offset of field: ft_program_data::IsoInB"]
        [::std::mem::offset_of!(ft_program_data, IsoInB) - 50usize];
    ["Offset of field: ft_program_data::IsoOutA"]
        [::std::mem::offset_of!(ft_program_data, IsoOutA) - 51usize];
    ["Offset of field: ft_program_data::IsoOutB"]
        [::std::mem::offset_of!(ft_program_data, IsoOutB) - 52usize];
    ["Offset of field: ft_program_data::PullDownEnable5"]
        [::std::mem::offset_of!(ft_program_data, PullDownEnable5) - 53usize];
    ["Offset of field: ft_program_data::SerNumEnable5"]
        [::std::mem::offset_of!(ft_program_data, SerNumEnable5) - 54usize];
    ["Offset of field: ft_program_data::USBVersionEnable5"]
        [::std::mem::offset_of!(ft_program_data, USBVersionEnable5) - 55usize];
    ["Offset of field: ft_program_data::USBVersion5"]
        [::std::mem::offset_of!(ft_program_data, USBVersion5) - 56usize];
    ["Offset of field: ft_program_data::AIsHighCurrent"]
        [::std::mem::offset_of!(ft_program_data, AIsHighCurrent) - 58usize];
    ["Offset of field: ft_program_data::BIsHighCurrent"]
        [::std::mem::offset_of!(ft_program_data, BIsHighCurrent) - 59usize];
    ["Offset of field: ft_program_data::IFAIsFifo"]
        [::std::mem::offset_of!(ft_program_data, IFAIsFifo) - 60usize];
    ["Offset of field: ft_program_data::IFAIsFifoTar"]
        [::std::mem::offset_of!(ft_program_data, IFAIsFifoTar) - 61usize];
    ["Offset of field: ft_program_data::IFAIsFastSer"]
        [::std::mem::offset_of!(ft_program_data, IFAIsFastSer) - 62usize];
    ["Offset of field: ft_program_data::AIsVCP"]
        [::std::mem::offset_of!(ft_program_data, AIsVCP) - 63usize];
    ["Offset of field: ft_program_data::IFBIsFifo"]
        [::std::mem::offset_of!(ft_program_data, IFBIsFifo) - 64usize];
    ["Offset of field: ft_program_data::IFBIsFifoTar"]
        [::std::mem::offset_of!(ft_program_data, IFBIsFifoTar) - 65usize];
    ["Offset of field: ft_program_data::IFBIsFastSer"]
        [::std::mem::offset_of!(ft_program_data, IFBIsFastSer) - 66usize];
    ["Offset of field: ft_program_data::BIsVCP"]
        [::std::mem::offset_of!(ft_program_data, BIsVCP) - 67usize];
    ["Offset of field: ft_program_data::UseExtOsc"]
        [::std::mem::offset_of!(ft_program_data, UseExtOsc) - 68usize];
    ["Offset of field: ft_program_data::HighDriveIOs"]
        [::std::mem::offset_of!(ft_program_data, HighDriveIOs) - 69usize];
    ["Offset of field: ft_program_data::EndpointSize"]
        [::std::mem::offset_of!(ft_program_data, EndpointSize) - 70usize];
    ["Offset of field: ft_program_data::PullDownEnableR"]
        [::std::mem::offset_of!(ft_program_data, PullDownEnableR) - 71usize];
    ["Offset of field: ft_program_data::SerNumEnableR"]
        [::std::mem::offset_of!(ft_program_data, SerNumEnableR) - 72usize];
    ["Offset of field: ft_program_data::InvertTXD"]
        [::std::mem::offset_of!(ft_program_data, InvertTXD) - 73usize];
    ["Offset of field: ft_program_data::InvertRXD"]
        [::std::mem::offset_of!(ft_program_data, InvertRXD) - 74usize];
    ["Offset of field: ft_program_data::InvertRTS"]
        [::std::mem::offset_of!(ft_program_data, InvertRTS) - 75usize];
    ["Offset of field: ft_program_data::InvertCTS"]
        [::std::mem::offset_of!(ft_program_data, InvertCTS) - 76usize];
    ["Offset of field: ft_program_data::InvertDTR"]
        [::std::mem::offset_of!(ft_program_data, InvertDTR) - 77usize];
    ["Offset of field: ft_program_data::InvertDSR"]
        [::std::mem::offset_of!(ft_program_data, InvertDSR) - 78usize];
    ["Offset of field: ft_program_data::InvertDCD"]
        [::std::mem::offset_of!(ft_program_data, InvertDCD) - 79usize];
    ["Offset of field: ft_program_data::InvertRI"]
        [::std::mem::offset_of!(ft_program_data, InvertRI) - 80usize];
    ["Offset of field: ft_program_data::Cbus0"]
        [::std::mem::offset_of!(ft_program_data, Cbus0) - 81usize];
    ["Offset of field: ft_program_data::Cbus1"]
        [::std::mem::offset_of!(ft_program_data, Cbus1) - 82usize];
    ["Offset of field: ft_program_data::Cbus2"]
        [::std::mem::offset_of!(ft_program_data, Cbus2) - 83usize];
    ["Offset of field: ft_program_data::Cbus3"]
        [::std::mem::offset_of!(ft_program_data, Cbus3) - 84usize];
    ["Offset of field: ft_program_data::Cbus4"]
        [::std::mem::offset_of!(ft_program_data, Cbus4) - 85usize];
    ["Offset of field: ft_program_data::RIsD2XX"]
        [::std::mem::offset_of!(ft_program_data, RIsD2XX) - 86usize];
    ["Offset of field: ft_program_data::PullDownEnable7"]
        [::std::mem::offset_of!(ft_program_data, PullDownEnable7) - 87usize];
    ["Offset of field: ft_program_data::SerNumEnable7"]
        [::std::mem::offset_of!(ft_program_data, SerNumEnable7) - 88usize];
    ["Offset of field: ft_program_data::ALSlowSlew"]
        [::std::mem::offset_of!(ft_program_data, ALSlowSlew) - 89usize];
    ["Offset of field: ft_program_data::ALSchmittInput"]
        [::std::mem::offset_of!(ft_program_data, ALSchmittInput) - 90usize];
    ["Offset of field: ft_program_data::ALDriveCurrent"]
        [::std::mem::offset_of!(ft_program_data, ALDriveCurrent) - 91usize];
    ["Offset of field: ft_program_data::AHSlowSlew"]
        [::std::mem::offset_of!(ft_program_data, AHSlowSlew) - 92usize];
    ["Offset of field: ft_program_data::AHSchmittInput"]
        [::std::mem::offset_of!(ft_program_data, AHSchmittInput) - 93usize];
    ["Offset of field: ft_program_data::AHDriveCurrent"]
        [::std::mem::offset_of!(ft_program_data, AHDriveCurrent) - 94usize];
    ["Offset of field: ft_program_data::BLSlowSlew"]
        [::std::mem::offset_of!(ft_program_data, BLSlowSlew) - 95usize];
    ["Offset of field: ft_program_data::BLSchmittInput"]
        [::std::mem::offset_of!(ft_program_data, BLSchmittInput) - 96usize];
    ["Offset of field: ft_program_data::BLDriveCurrent"]
        [::std::mem::offset_of!(ft_program_data, BLDriveCurrent) - 97usize];
    ["Offset of field: ft_program_data::BHSlowSlew"]
        [::std::mem::offset_of!(ft_program_data, BHSlowSlew) - 98usize];
    ["Offset of field: ft_program_data::BHSchmittInput"]
        [::std::mem::offset_of!(ft_program_data, BHSchmittInput) - 99usize];
    ["Offset of field: ft_program_data::BHDriveCurrent"]
        [::std::mem::offset_of!(ft_program_data, BHDriveCurrent) - 100usize];
    ["Offset of field: ft_program_data::IFAIsFifo7"]
        [::std::mem::offset_of!(ft_program_data, IFAIsFifo7) - 101usize];
    ["Offset of field: ft_program_data::IFAIsFifoTar7"]
        [::std::mem::offset_of!(ft_program_data, IFAIsFifoTar7) - 102usize];
    ["Offset of field: ft_program_data::IFAIsFastSer7"]
        [::std::mem::offset_of!(ft_program_data, IFAIsFastSer7) - 103usize];
    ["Offset of field: ft_program_data::AIsVCP7"]
        [::std::mem::offset_of!(ft_program_data, AIsVCP7) - 104usize];
    ["Offset of field: ft_program_data::IFBIsFifo7"]
        [::std::mem::offset_of!(ft_program_data, IFBIsFifo7) - 105usize];
    ["Offset of field: ft_program_data::IFBIsFifoTar7"]
        [::std::mem::offset_of!(ft_program_data, IFBIsFifoTar7) - 106usize];
    ["Offset of field: ft_program_data::IFBIsFastSer7"]
        [::std::mem::offset_of!(ft_program_data, IFBIsFastSer7) - 107usize];
    ["Offset of field: ft_program_data::BIsVCP7"]
        [::std::mem::offset_of!(ft_program_data, BIsVCP7) - 108usize];
    ["Offset of field: ft_program_data::PowerSaveEnable"]
        [::std::mem::offset_of!(ft_program_data, PowerSaveEnable) - 109usize];
    ["Offset of field: ft_program_data::PullDownEnable8"]
        [::std::mem::offset_of!(ft_program_data, PullDownEnable8) - 110usize];
    ["Offset of field: ft_program_data::SerNumEnable8"]
        [::std::mem::offset_of!(ft_program_data, SerNumEnable8) - 111usize];
    ["Offset of field: ft_program_data::ASlowSlew"]
        [::std::mem::offset_of!(ft_program_data, ASlowSlew) - 112usize];
    ["Offset of field: ft_program_data::ASchmittInput"]
        [::std::mem::offset_of!(ft_program_data, ASchmittInput) - 113usize];
    ["Offset of field: ft_program_data::ADriveCurrent"]
        [::std::mem::offset_of!(ft_program_data, ADriveCurrent) - 114usize];
    ["Offset of field: ft_program_data::BSlowSlew"]
        [::std::mem::offset_of!(ft_program_data, BSlowSlew) - 115usize];
    ["Offset of field: ft_program_data::BSchmittInput"]
        [::std::mem::offset_of!(ft_program_data, BSchmittInput) - 116usize];
    ["Offset of field: ft_program_data::BDriveCurrent"]
        [::std::mem::offset_of!(ft_program_data, BDriveCurrent) - 117usize];
    ["Offset of field: ft_program_data::CSlowSlew"]
        [::std::mem::offset_of!(ft_program_data, CSlowSlew) - 118usize];
    ["Offset of field: ft_program_data::CSchmittInput"]
        [::std::mem::offset_of!(ft_program_data, CSchmittInput) - 119usize];
    ["Offset of field: ft_program_data::CDriveCurrent"]
        [::std::mem::offset_of!(ft_program_data, CDriveCurrent) - 120usize];
    ["Offset of field: ft_program_data::DSlowSlew"]
        [::std::mem::offset_of!(ft_program_data, DSlowSlew) - 121usize];
    ["Offset of field: ft_program_data::DSchmittInput"]
        [::std::mem::offset_of!(ft_program_data, DSchmittInput) - 122usize];
    ["Offset of field: ft_program_data::DDriveCurrent"]
        [::std::mem::offset_of!(ft_program_data, DDriveCurrent) - 123usize];
    ["Offset of field: ft_program_data::ARIIsTXDEN"]
        [::std::mem::offset_of!(ft_program_data, ARIIsTXDEN) - 124usize];
    ["Offset of field: ft_program_data::BRIIsTXDEN"]
        [::std::mem::offset_of!(ft_program_data, BRIIsTXDEN) - 125usize];
    ["Offset of field: ft_program_data::CRIIsTXDEN"]
        [::std::mem::offset_of!(ft_program_data, CRIIsTXDEN) - 126usize];
    ["Offset of field: ft_program_data::DRIIsTXDEN"]
        [::std::mem::offset_of!(ft_program_data, DRIIsTXDEN) - 127usize];
    ["Offset of field: ft_program_data::AIsVCP8"]
        [::std::mem::offset_of!(ft_program_data, AIsVCP8) - 128usize];
    ["Offset of field: ft_program_data::BIsVCP8"]
        [::std::mem::offset_of!(ft_program_data, BIsVCP8) - 129usize];
    ["Offset of field: ft_program_data::CIsVCP8"]
        [::std::mem::offset_of!(ft_program_data, CIsVCP8) - 130usize];
    ["Offset of field: ft_program_data::DIsVCP8"]
        [::std::mem::offset_of!(ft_program_data, DIsVCP8) - 131usize];
    ["Offset of field: ft_program_data::PullDownEnableH"]
        [::std::mem::offset_of!(ft_program_data, PullDownEnableH) - 132usize];
    ["Offset of field: ft_program_data::SerNumEnableH"]
        [::std::mem::offset_of!(ft_program_data, SerNumEnableH) - 133usize];
    ["Offset of field: ft_program_data::ACSlowSlewH"]
        [::std::mem::offset_of!(ft_program_data, ACSlowSlewH) - 134usize];
    ["Offset of field: ft_program_data::ACSchmittInputH"]
        [::std::mem::offset_of!(ft_program_data, ACSchmittInputH) - 135usize];
    ["Offset of field: ft_program_data::ACDriveCurrentH"]
        [::std::mem::offset_of!(ft_program_data, ACDriveCurrentH) - 136usize];
    ["Offset of field: ft_program_data::ADSlowSlewH"]
        [::std::mem::offset_of!(ft_program_data, ADSlowSlewH) - 137usize];
    ["Offset of field: ft_program_data::ADSchmittInputH"]
        [::std::mem::offset_of!(ft_program_data, ADSchmittInputH) - 138usize];
    ["Offset of field: ft_program_data::ADDriveCurrentH"]
        [::std::mem::offset_of!(ft_program_data, ADDriveCurrentH) - 139usize];
    ["Offset of field: ft_program_data::Cbus0H"]
        [::std::mem::offset_of!(ft_program_data, Cbus0H) - 140usize];
    ["Offset of field: ft_program_data::Cbus1H"]
        [::std::mem::offset_of!(ft_program_data, Cbus1H) - 141usize];
    ["Offset of field: ft_program_data::Cbus2H"]
        [::std::mem::offset_of!(ft_program_data, Cbus2H) - 142usize];
    ["Offset of field: ft_program_data::Cbus3H"]
        [::std::mem::offset_of!(ft_program_data, Cbus3H) - 143usize];
    ["Offset of field: ft_program_data::Cbus4H"]
        [::std::mem::offset_of!(ft_program_data, Cbus4H) - 144usize];
    ["Offset of field: ft_program_data::Cbus5H"]
        [::std::mem::offset_of!(ft_program_data, Cbus5H) - 145usize];
    ["Offset of field: ft_program_data::Cbus6H"]
        [::std::mem::offset_of!(ft_program_data, Cbus6H) - 146usize];
    ["Offset of field: ft_program_data::Cbus7H"]
        [::std::mem::offset_of!(ft_program_data, Cbus7H) - 147usize];
    ["Offset of field: ft_program_data::Cbus8H"]
        [::std::mem::offset_of!(ft_program_data, Cbus8H) - 148usize];
    ["Offset of field: ft_program_data::Cbus9H"]
        [::std::mem::offset_of!(ft_program_data, Cbus9H) - 149usize];
    ["Offset of field: ft_program_data::IsFifoH"]
        [::std::mem::offset_of!(ft_program_data, IsFifoH) - 150usize];
    ["Offset of field: ft_program_data::IsFifoTarH"]
        [::std::mem::offset_of!(ft_program_data, IsFifoTarH) - 151usize];
    ["Offset of field: ft_program_data::IsFastSerH"]
        [::std::mem::offset_of!(ft_program_data, IsFastSerH) - 152usize];
    ["Offset of field: ft_program_data::IsFT1248H"]
        [::std::mem::offset_of!(ft_program_data, IsFT1248H) - 153usize];
    ["Offset of field: ft_program_data::FT1248CpolH"]
        [::std::mem::offset_of!(ft_program_data, FT1248CpolH) - 154usize];
    ["Offset of field: ft_program_data::FT1248LsbH"]
        [::std::mem::offset_of!(ft_program_data, FT1248LsbH) - 155usize];
    ["Offset of field: ft_program_data::FT1248FlowControlH"]
        [::std::mem::offset_of!(ft_program_data, FT1248FlowControlH) - 156usize];
    ["Offset of field: ft_program_data::IsVCPH"]
        [::std::mem::offset_of!(ft_program_data, IsVCPH) - 157usize];
    ["Offset of field: ft_program_data::PowerSaveEnableH"]
        [::std::mem::offset_of!(ft_program_data, PowerSaveEnableH) - 158usize];
};
impl Default for ft_program_data {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type FT_PROGRAM_DATA = ft_program_data;
pub type PFT_PROGRAM_DATA = *mut ft_program_data;
unsafe extern "stdcall" {
    pub fn FT_EE_Program(ftHandle: FT_HANDLE, pData: PFT_PROGRAM_DATA) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_EE_ProgramEx(
        ftHandle: FT_HANDLE,
        pData: PFT_PROGRAM_DATA,
        Manufacturer: *mut ::std::os::raw::c_char,
        ManufacturerId: *mut ::std::os::raw::c_char,
        Description: *mut ::std::os::raw::c_char,
        SerialNumber: *mut ::std::os::raw::c_char,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_EE_Read(ftHandle: FT_HANDLE, pData: PFT_PROGRAM_DATA) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_EE_ReadEx(
        ftHandle: FT_HANDLE,
        pData: PFT_PROGRAM_DATA,
        Manufacturer: *mut ::std::os::raw::c_char,
        ManufacturerId: *mut ::std::os::raw::c_char,
        Description: *mut ::std::os::raw::c_char,
        SerialNumber: *mut ::std::os::raw::c_char,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_EE_UASize(ftHandle: FT_HANDLE, lpdwSize: LPDWORD) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_EE_UAWrite(ftHandle: FT_HANDLE, pucData: PUCHAR, dwDataLen: DWORD) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_EE_UARead(
        ftHandle: FT_HANDLE,
        pucData: PUCHAR,
        dwDataLen: DWORD,
        lpdwBytesRead: LPDWORD,
    ) -> FT_STATUS;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ft_eeprom_header {
    pub deviceType: FT_DEVICE,
    pub VendorId: WORD,
    pub ProductId: WORD,
    pub SerNumEnable: UCHAR,
    pub MaxPower: WORD,
    pub SelfPowered: UCHAR,
    pub RemoteWakeup: UCHAR,
    pub PullDownEnable: UCHAR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ft_eeprom_header"][::std::mem::size_of::<ft_eeprom_header>() - 16usize];
    ["Alignment of ft_eeprom_header"][::std::mem::align_of::<ft_eeprom_header>() - 4usize];
    ["Offset of field: ft_eeprom_header::deviceType"]
        [::std::mem::offset_of!(ft_eeprom_header, deviceType) - 0usize];
    ["Offset of field: ft_eeprom_header::VendorId"]
        [::std::mem::offset_of!(ft_eeprom_header, VendorId) - 4usize];
    ["Offset of field: ft_eeprom_header::ProductId"]
        [::std::mem::offset_of!(ft_eeprom_header, ProductId) - 6usize];
    ["Offset of field: ft_eeprom_header::SerNumEnable"]
        [::std::mem::offset_of!(ft_eeprom_header, SerNumEnable) - 8usize];
    ["Offset of field: ft_eeprom_header::MaxPower"]
        [::std::mem::offset_of!(ft_eeprom_header, MaxPower) - 10usize];
    ["Offset of field: ft_eeprom_header::SelfPowered"]
        [::std::mem::offset_of!(ft_eeprom_header, SelfPowered) - 12usize];
    ["Offset of field: ft_eeprom_header::RemoteWakeup"]
        [::std::mem::offset_of!(ft_eeprom_header, RemoteWakeup) - 13usize];
    ["Offset of field: ft_eeprom_header::PullDownEnable"]
        [::std::mem::offset_of!(ft_eeprom_header, PullDownEnable) - 14usize];
};
pub type FT_EEPROM_HEADER = ft_eeprom_header;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ft_eeprom_232b {
    pub common: FT_EEPROM_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ft_eeprom_232b"][::std::mem::size_of::<ft_eeprom_232b>() - 16usize];
    ["Alignment of ft_eeprom_232b"][::std::mem::align_of::<ft_eeprom_232b>() - 4usize];
    ["Offset of field: ft_eeprom_232b::common"]
        [::std::mem::offset_of!(ft_eeprom_232b, common) - 0usize];
};
pub type FT_EEPROM_232B = ft_eeprom_232b;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ft_eeprom_2232 {
    pub common: FT_EEPROM_HEADER,
    pub AIsHighCurrent: UCHAR,
    pub BIsHighCurrent: UCHAR,
    pub AIsFifo: UCHAR,
    pub AIsFifoTar: UCHAR,
    pub AIsFastSer: UCHAR,
    pub BIsFifo: UCHAR,
    pub BIsFifoTar: UCHAR,
    pub BIsFastSer: UCHAR,
    pub ADriverType: UCHAR,
    pub BDriverType: UCHAR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ft_eeprom_2232"][::std::mem::size_of::<ft_eeprom_2232>() - 28usize];
    ["Alignment of ft_eeprom_2232"][::std::mem::align_of::<ft_eeprom_2232>() - 4usize];
    ["Offset of field: ft_eeprom_2232::common"]
        [::std::mem::offset_of!(ft_eeprom_2232, common) - 0usize];
    ["Offset of field: ft_eeprom_2232::AIsHighCurrent"]
        [::std::mem::offset_of!(ft_eeprom_2232, AIsHighCurrent) - 16usize];
    ["Offset of field: ft_eeprom_2232::BIsHighCurrent"]
        [::std::mem::offset_of!(ft_eeprom_2232, BIsHighCurrent) - 17usize];
    ["Offset of field: ft_eeprom_2232::AIsFifo"]
        [::std::mem::offset_of!(ft_eeprom_2232, AIsFifo) - 18usize];
    ["Offset of field: ft_eeprom_2232::AIsFifoTar"]
        [::std::mem::offset_of!(ft_eeprom_2232, AIsFifoTar) - 19usize];
    ["Offset of field: ft_eeprom_2232::AIsFastSer"]
        [::std::mem::offset_of!(ft_eeprom_2232, AIsFastSer) - 20usize];
    ["Offset of field: ft_eeprom_2232::BIsFifo"]
        [::std::mem::offset_of!(ft_eeprom_2232, BIsFifo) - 21usize];
    ["Offset of field: ft_eeprom_2232::BIsFifoTar"]
        [::std::mem::offset_of!(ft_eeprom_2232, BIsFifoTar) - 22usize];
    ["Offset of field: ft_eeprom_2232::BIsFastSer"]
        [::std::mem::offset_of!(ft_eeprom_2232, BIsFastSer) - 23usize];
    ["Offset of field: ft_eeprom_2232::ADriverType"]
        [::std::mem::offset_of!(ft_eeprom_2232, ADriverType) - 24usize];
    ["Offset of field: ft_eeprom_2232::BDriverType"]
        [::std::mem::offset_of!(ft_eeprom_2232, BDriverType) - 25usize];
};
pub type FT_EEPROM_2232 = ft_eeprom_2232;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ft_eeprom_232r {
    pub common: FT_EEPROM_HEADER,
    pub IsHighCurrent: UCHAR,
    pub UseExtOsc: UCHAR,
    pub InvertTXD: UCHAR,
    pub InvertRXD: UCHAR,
    pub InvertRTS: UCHAR,
    pub InvertCTS: UCHAR,
    pub InvertDTR: UCHAR,
    pub InvertDSR: UCHAR,
    pub InvertDCD: UCHAR,
    pub InvertRI: UCHAR,
    pub Cbus0: UCHAR,
    pub Cbus1: UCHAR,
    pub Cbus2: UCHAR,
    pub Cbus3: UCHAR,
    pub Cbus4: UCHAR,
    pub DriverType: UCHAR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ft_eeprom_232r"][::std::mem::size_of::<ft_eeprom_232r>() - 32usize];
    ["Alignment of ft_eeprom_232r"][::std::mem::align_of::<ft_eeprom_232r>() - 4usize];
    ["Offset of field: ft_eeprom_232r::common"]
        [::std::mem::offset_of!(ft_eeprom_232r, common) - 0usize];
    ["Offset of field: ft_eeprom_232r::IsHighCurrent"]
        [::std::mem::offset_of!(ft_eeprom_232r, IsHighCurrent) - 16usize];
    ["Offset of field: ft_eeprom_232r::UseExtOsc"]
        [::std::mem::offset_of!(ft_eeprom_232r, UseExtOsc) - 17usize];
    ["Offset of field: ft_eeprom_232r::InvertTXD"]
        [::std::mem::offset_of!(ft_eeprom_232r, InvertTXD) - 18usize];
    ["Offset of field: ft_eeprom_232r::InvertRXD"]
        [::std::mem::offset_of!(ft_eeprom_232r, InvertRXD) - 19usize];
    ["Offset of field: ft_eeprom_232r::InvertRTS"]
        [::std::mem::offset_of!(ft_eeprom_232r, InvertRTS) - 20usize];
    ["Offset of field: ft_eeprom_232r::InvertCTS"]
        [::std::mem::offset_of!(ft_eeprom_232r, InvertCTS) - 21usize];
    ["Offset of field: ft_eeprom_232r::InvertDTR"]
        [::std::mem::offset_of!(ft_eeprom_232r, InvertDTR) - 22usize];
    ["Offset of field: ft_eeprom_232r::InvertDSR"]
        [::std::mem::offset_of!(ft_eeprom_232r, InvertDSR) - 23usize];
    ["Offset of field: ft_eeprom_232r::InvertDCD"]
        [::std::mem::offset_of!(ft_eeprom_232r, InvertDCD) - 24usize];
    ["Offset of field: ft_eeprom_232r::InvertRI"]
        [::std::mem::offset_of!(ft_eeprom_232r, InvertRI) - 25usize];
    ["Offset of field: ft_eeprom_232r::Cbus0"]
        [::std::mem::offset_of!(ft_eeprom_232r, Cbus0) - 26usize];
    ["Offset of field: ft_eeprom_232r::Cbus1"]
        [::std::mem::offset_of!(ft_eeprom_232r, Cbus1) - 27usize];
    ["Offset of field: ft_eeprom_232r::Cbus2"]
        [::std::mem::offset_of!(ft_eeprom_232r, Cbus2) - 28usize];
    ["Offset of field: ft_eeprom_232r::Cbus3"]
        [::std::mem::offset_of!(ft_eeprom_232r, Cbus3) - 29usize];
    ["Offset of field: ft_eeprom_232r::Cbus4"]
        [::std::mem::offset_of!(ft_eeprom_232r, Cbus4) - 30usize];
    ["Offset of field: ft_eeprom_232r::DriverType"]
        [::std::mem::offset_of!(ft_eeprom_232r, DriverType) - 31usize];
};
pub type FT_EEPROM_232R = ft_eeprom_232r;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ft_eeprom_2232h {
    pub common: FT_EEPROM_HEADER,
    pub ALSlowSlew: UCHAR,
    pub ALSchmittInput: UCHAR,
    pub ALDriveCurrent: UCHAR,
    pub AHSlowSlew: UCHAR,
    pub AHSchmittInput: UCHAR,
    pub AHDriveCurrent: UCHAR,
    pub BLSlowSlew: UCHAR,
    pub BLSchmittInput: UCHAR,
    pub BLDriveCurrent: UCHAR,
    pub BHSlowSlew: UCHAR,
    pub BHSchmittInput: UCHAR,
    pub BHDriveCurrent: UCHAR,
    pub AIsFifo: UCHAR,
    pub AIsFifoTar: UCHAR,
    pub AIsFastSer: UCHAR,
    pub BIsFifo: UCHAR,
    pub BIsFifoTar: UCHAR,
    pub BIsFastSer: UCHAR,
    pub PowerSaveEnable: UCHAR,
    pub ADriverType: UCHAR,
    pub BDriverType: UCHAR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ft_eeprom_2232h"][::std::mem::size_of::<ft_eeprom_2232h>() - 40usize];
    ["Alignment of ft_eeprom_2232h"][::std::mem::align_of::<ft_eeprom_2232h>() - 4usize];
    ["Offset of field: ft_eeprom_2232h::common"]
        [::std::mem::offset_of!(ft_eeprom_2232h, common) - 0usize];
    ["Offset of field: ft_eeprom_2232h::ALSlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_2232h, ALSlowSlew) - 16usize];
    ["Offset of field: ft_eeprom_2232h::ALSchmittInput"]
        [::std::mem::offset_of!(ft_eeprom_2232h, ALSchmittInput) - 17usize];
    ["Offset of field: ft_eeprom_2232h::ALDriveCurrent"]
        [::std::mem::offset_of!(ft_eeprom_2232h, ALDriveCurrent) - 18usize];
    ["Offset of field: ft_eeprom_2232h::AHSlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_2232h, AHSlowSlew) - 19usize];
    ["Offset of field: ft_eeprom_2232h::AHSchmittInput"]
        [::std::mem::offset_of!(ft_eeprom_2232h, AHSchmittInput) - 20usize];
    ["Offset of field: ft_eeprom_2232h::AHDriveCurrent"]
        [::std::mem::offset_of!(ft_eeprom_2232h, AHDriveCurrent) - 21usize];
    ["Offset of field: ft_eeprom_2232h::BLSlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_2232h, BLSlowSlew) - 22usize];
    ["Offset of field: ft_eeprom_2232h::BLSchmittInput"]
        [::std::mem::offset_of!(ft_eeprom_2232h, BLSchmittInput) - 23usize];
    ["Offset of field: ft_eeprom_2232h::BLDriveCurrent"]
        [::std::mem::offset_of!(ft_eeprom_2232h, BLDriveCurrent) - 24usize];
    ["Offset of field: ft_eeprom_2232h::BHSlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_2232h, BHSlowSlew) - 25usize];
    ["Offset of field: ft_eeprom_2232h::BHSchmittInput"]
        [::std::mem::offset_of!(ft_eeprom_2232h, BHSchmittInput) - 26usize];
    ["Offset of field: ft_eeprom_2232h::BHDriveCurrent"]
        [::std::mem::offset_of!(ft_eeprom_2232h, BHDriveCurrent) - 27usize];
    ["Offset of field: ft_eeprom_2232h::AIsFifo"]
        [::std::mem::offset_of!(ft_eeprom_2232h, AIsFifo) - 28usize];
    ["Offset of field: ft_eeprom_2232h::AIsFifoTar"]
        [::std::mem::offset_of!(ft_eeprom_2232h, AIsFifoTar) - 29usize];
    ["Offset of field: ft_eeprom_2232h::AIsFastSer"]
        [::std::mem::offset_of!(ft_eeprom_2232h, AIsFastSer) - 30usize];
    ["Offset of field: ft_eeprom_2232h::BIsFifo"]
        [::std::mem::offset_of!(ft_eeprom_2232h, BIsFifo) - 31usize];
    ["Offset of field: ft_eeprom_2232h::BIsFifoTar"]
        [::std::mem::offset_of!(ft_eeprom_2232h, BIsFifoTar) - 32usize];
    ["Offset of field: ft_eeprom_2232h::BIsFastSer"]
        [::std::mem::offset_of!(ft_eeprom_2232h, BIsFastSer) - 33usize];
    ["Offset of field: ft_eeprom_2232h::PowerSaveEnable"]
        [::std::mem::offset_of!(ft_eeprom_2232h, PowerSaveEnable) - 34usize];
    ["Offset of field: ft_eeprom_2232h::ADriverType"]
        [::std::mem::offset_of!(ft_eeprom_2232h, ADriverType) - 35usize];
    ["Offset of field: ft_eeprom_2232h::BDriverType"]
        [::std::mem::offset_of!(ft_eeprom_2232h, BDriverType) - 36usize];
};
pub type FT_EEPROM_2232H = ft_eeprom_2232h;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ft_eeprom_4232h {
    pub common: FT_EEPROM_HEADER,
    pub ASlowSlew: UCHAR,
    pub ASchmittInput: UCHAR,
    pub ADriveCurrent: UCHAR,
    pub BSlowSlew: UCHAR,
    pub BSchmittInput: UCHAR,
    pub BDriveCurrent: UCHAR,
    pub CSlowSlew: UCHAR,
    pub CSchmittInput: UCHAR,
    pub CDriveCurrent: UCHAR,
    pub DSlowSlew: UCHAR,
    pub DSchmittInput: UCHAR,
    pub DDriveCurrent: UCHAR,
    pub ARIIsTXDEN: UCHAR,
    pub BRIIsTXDEN: UCHAR,
    pub CRIIsTXDEN: UCHAR,
    pub DRIIsTXDEN: UCHAR,
    pub ADriverType: UCHAR,
    pub BDriverType: UCHAR,
    pub CDriverType: UCHAR,
    pub DDriverType: UCHAR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ft_eeprom_4232h"][::std::mem::size_of::<ft_eeprom_4232h>() - 36usize];
    ["Alignment of ft_eeprom_4232h"][::std::mem::align_of::<ft_eeprom_4232h>() - 4usize];
    ["Offset of field: ft_eeprom_4232h::common"]
        [::std::mem::offset_of!(ft_eeprom_4232h, common) - 0usize];
    ["Offset of field: ft_eeprom_4232h::ASlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_4232h, ASlowSlew) - 16usize];
    ["Offset of field: ft_eeprom_4232h::ASchmittInput"]
        [::std::mem::offset_of!(ft_eeprom_4232h, ASchmittInput) - 17usize];
    ["Offset of field: ft_eeprom_4232h::ADriveCurrent"]
        [::std::mem::offset_of!(ft_eeprom_4232h, ADriveCurrent) - 18usize];
    ["Offset of field: ft_eeprom_4232h::BSlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_4232h, BSlowSlew) - 19usize];
    ["Offset of field: ft_eeprom_4232h::BSchmittInput"]
        [::std::mem::offset_of!(ft_eeprom_4232h, BSchmittInput) - 20usize];
    ["Offset of field: ft_eeprom_4232h::BDriveCurrent"]
        [::std::mem::offset_of!(ft_eeprom_4232h, BDriveCurrent) - 21usize];
    ["Offset of field: ft_eeprom_4232h::CSlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_4232h, CSlowSlew) - 22usize];
    ["Offset of field: ft_eeprom_4232h::CSchmittInput"]
        [::std::mem::offset_of!(ft_eeprom_4232h, CSchmittInput) - 23usize];
    ["Offset of field: ft_eeprom_4232h::CDriveCurrent"]
        [::std::mem::offset_of!(ft_eeprom_4232h, CDriveCurrent) - 24usize];
    ["Offset of field: ft_eeprom_4232h::DSlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_4232h, DSlowSlew) - 25usize];
    ["Offset of field: ft_eeprom_4232h::DSchmittInput"]
        [::std::mem::offset_of!(ft_eeprom_4232h, DSchmittInput) - 26usize];
    ["Offset of field: ft_eeprom_4232h::DDriveCurrent"]
        [::std::mem::offset_of!(ft_eeprom_4232h, DDriveCurrent) - 27usize];
    ["Offset of field: ft_eeprom_4232h::ARIIsTXDEN"]
        [::std::mem::offset_of!(ft_eeprom_4232h, ARIIsTXDEN) - 28usize];
    ["Offset of field: ft_eeprom_4232h::BRIIsTXDEN"]
        [::std::mem::offset_of!(ft_eeprom_4232h, BRIIsTXDEN) - 29usize];
    ["Offset of field: ft_eeprom_4232h::CRIIsTXDEN"]
        [::std::mem::offset_of!(ft_eeprom_4232h, CRIIsTXDEN) - 30usize];
    ["Offset of field: ft_eeprom_4232h::DRIIsTXDEN"]
        [::std::mem::offset_of!(ft_eeprom_4232h, DRIIsTXDEN) - 31usize];
    ["Offset of field: ft_eeprom_4232h::ADriverType"]
        [::std::mem::offset_of!(ft_eeprom_4232h, ADriverType) - 32usize];
    ["Offset of field: ft_eeprom_4232h::BDriverType"]
        [::std::mem::offset_of!(ft_eeprom_4232h, BDriverType) - 33usize];
    ["Offset of field: ft_eeprom_4232h::CDriverType"]
        [::std::mem::offset_of!(ft_eeprom_4232h, CDriverType) - 34usize];
    ["Offset of field: ft_eeprom_4232h::DDriverType"]
        [::std::mem::offset_of!(ft_eeprom_4232h, DDriverType) - 35usize];
};
pub type FT_EEPROM_4232H = ft_eeprom_4232h;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ft_eeprom_232h {
    pub common: FT_EEPROM_HEADER,
    pub ACSlowSlew: UCHAR,
    pub ACSchmittInput: UCHAR,
    pub ACDriveCurrent: UCHAR,
    pub ADSlowSlew: UCHAR,
    pub ADSchmittInput: UCHAR,
    pub ADDriveCurrent: UCHAR,
    pub Cbus0: UCHAR,
    pub Cbus1: UCHAR,
    pub Cbus2: UCHAR,
    pub Cbus3: UCHAR,
    pub Cbus4: UCHAR,
    pub Cbus5: UCHAR,
    pub Cbus6: UCHAR,
    pub Cbus7: UCHAR,
    pub Cbus8: UCHAR,
    pub Cbus9: UCHAR,
    pub FT1248Cpol: UCHAR,
    pub FT1248Lsb: UCHAR,
    pub FT1248FlowControl: UCHAR,
    pub IsFifo: UCHAR,
    pub IsFifoTar: UCHAR,
    pub IsFastSer: UCHAR,
    pub IsFT1248: UCHAR,
    pub PowerSaveEnable: UCHAR,
    pub DriverType: UCHAR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ft_eeprom_232h"][::std::mem::size_of::<ft_eeprom_232h>() - 44usize];
    ["Alignment of ft_eeprom_232h"][::std::mem::align_of::<ft_eeprom_232h>() - 4usize];
    ["Offset of field: ft_eeprom_232h::common"]
        [::std::mem::offset_of!(ft_eeprom_232h, common) - 0usize];
    ["Offset of field: ft_eeprom_232h::ACSlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_232h, ACSlowSlew) - 16usize];
    ["Offset of field: ft_eeprom_232h::ACSchmittInput"]
        [::std::mem::offset_of!(ft_eeprom_232h, ACSchmittInput) - 17usize];
    ["Offset of field: ft_eeprom_232h::ACDriveCurrent"]
        [::std::mem::offset_of!(ft_eeprom_232h, ACDriveCurrent) - 18usize];
    ["Offset of field: ft_eeprom_232h::ADSlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_232h, ADSlowSlew) - 19usize];
    ["Offset of field: ft_eeprom_232h::ADSchmittInput"]
        [::std::mem::offset_of!(ft_eeprom_232h, ADSchmittInput) - 20usize];
    ["Offset of field: ft_eeprom_232h::ADDriveCurrent"]
        [::std::mem::offset_of!(ft_eeprom_232h, ADDriveCurrent) - 21usize];
    ["Offset of field: ft_eeprom_232h::Cbus0"]
        [::std::mem::offset_of!(ft_eeprom_232h, Cbus0) - 22usize];
    ["Offset of field: ft_eeprom_232h::Cbus1"]
        [::std::mem::offset_of!(ft_eeprom_232h, Cbus1) - 23usize];
    ["Offset of field: ft_eeprom_232h::Cbus2"]
        [::std::mem::offset_of!(ft_eeprom_232h, Cbus2) - 24usize];
    ["Offset of field: ft_eeprom_232h::Cbus3"]
        [::std::mem::offset_of!(ft_eeprom_232h, Cbus3) - 25usize];
    ["Offset of field: ft_eeprom_232h::Cbus4"]
        [::std::mem::offset_of!(ft_eeprom_232h, Cbus4) - 26usize];
    ["Offset of field: ft_eeprom_232h::Cbus5"]
        [::std::mem::offset_of!(ft_eeprom_232h, Cbus5) - 27usize];
    ["Offset of field: ft_eeprom_232h::Cbus6"]
        [::std::mem::offset_of!(ft_eeprom_232h, Cbus6) - 28usize];
    ["Offset of field: ft_eeprom_232h::Cbus7"]
        [::std::mem::offset_of!(ft_eeprom_232h, Cbus7) - 29usize];
    ["Offset of field: ft_eeprom_232h::Cbus8"]
        [::std::mem::offset_of!(ft_eeprom_232h, Cbus8) - 30usize];
    ["Offset of field: ft_eeprom_232h::Cbus9"]
        [::std::mem::offset_of!(ft_eeprom_232h, Cbus9) - 31usize];
    ["Offset of field: ft_eeprom_232h::FT1248Cpol"]
        [::std::mem::offset_of!(ft_eeprom_232h, FT1248Cpol) - 32usize];
    ["Offset of field: ft_eeprom_232h::FT1248Lsb"]
        [::std::mem::offset_of!(ft_eeprom_232h, FT1248Lsb) - 33usize];
    ["Offset of field: ft_eeprom_232h::FT1248FlowControl"]
        [::std::mem::offset_of!(ft_eeprom_232h, FT1248FlowControl) - 34usize];
    ["Offset of field: ft_eeprom_232h::IsFifo"]
        [::std::mem::offset_of!(ft_eeprom_232h, IsFifo) - 35usize];
    ["Offset of field: ft_eeprom_232h::IsFifoTar"]
        [::std::mem::offset_of!(ft_eeprom_232h, IsFifoTar) - 36usize];
    ["Offset of field: ft_eeprom_232h::IsFastSer"]
        [::std::mem::offset_of!(ft_eeprom_232h, IsFastSer) - 37usize];
    ["Offset of field: ft_eeprom_232h::IsFT1248"]
        [::std::mem::offset_of!(ft_eeprom_232h, IsFT1248) - 38usize];
    ["Offset of field: ft_eeprom_232h::PowerSaveEnable"]
        [::std::mem::offset_of!(ft_eeprom_232h, PowerSaveEnable) - 39usize];
    ["Offset of field: ft_eeprom_232h::DriverType"]
        [::std::mem::offset_of!(ft_eeprom_232h, DriverType) - 40usize];
};
pub type FT_EEPROM_232H = ft_eeprom_232h;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ft_eeprom_x_series {
    pub common: FT_EEPROM_HEADER,
    pub ACSlowSlew: UCHAR,
    pub ACSchmittInput: UCHAR,
    pub ACDriveCurrent: UCHAR,
    pub ADSlowSlew: UCHAR,
    pub ADSchmittInput: UCHAR,
    pub ADDriveCurrent: UCHAR,
    pub Cbus0: UCHAR,
    pub Cbus1: UCHAR,
    pub Cbus2: UCHAR,
    pub Cbus3: UCHAR,
    pub Cbus4: UCHAR,
    pub Cbus5: UCHAR,
    pub Cbus6: UCHAR,
    pub InvertTXD: UCHAR,
    pub InvertRXD: UCHAR,
    pub InvertRTS: UCHAR,
    pub InvertCTS: UCHAR,
    pub InvertDTR: UCHAR,
    pub InvertDSR: UCHAR,
    pub InvertDCD: UCHAR,
    pub InvertRI: UCHAR,
    pub BCDEnable: UCHAR,
    pub BCDForceCbusPWREN: UCHAR,
    pub BCDDisableSleep: UCHAR,
    pub I2CSlaveAddress: WORD,
    pub I2CDeviceId: DWORD,
    pub I2CDisableSchmitt: UCHAR,
    pub FT1248Cpol: UCHAR,
    pub FT1248Lsb: UCHAR,
    pub FT1248FlowControl: UCHAR,
    pub RS485EchoSuppress: UCHAR,
    pub PowerSaveEnable: UCHAR,
    pub DriverType: UCHAR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ft_eeprom_x_series"][::std::mem::size_of::<ft_eeprom_x_series>() - 56usize];
    ["Alignment of ft_eeprom_x_series"][::std::mem::align_of::<ft_eeprom_x_series>() - 4usize];
    ["Offset of field: ft_eeprom_x_series::common"]
        [::std::mem::offset_of!(ft_eeprom_x_series, common) - 0usize];
    ["Offset of field: ft_eeprom_x_series::ACSlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_x_series, ACSlowSlew) - 16usize];
    ["Offset of field: ft_eeprom_x_series::ACSchmittInput"]
        [::std::mem::offset_of!(ft_eeprom_x_series, ACSchmittInput) - 17usize];
    ["Offset of field: ft_eeprom_x_series::ACDriveCurrent"]
        [::std::mem::offset_of!(ft_eeprom_x_series, ACDriveCurrent) - 18usize];
    ["Offset of field: ft_eeprom_x_series::ADSlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_x_series, ADSlowSlew) - 19usize];
    ["Offset of field: ft_eeprom_x_series::ADSchmittInput"]
        [::std::mem::offset_of!(ft_eeprom_x_series, ADSchmittInput) - 20usize];
    ["Offset of field: ft_eeprom_x_series::ADDriveCurrent"]
        [::std::mem::offset_of!(ft_eeprom_x_series, ADDriveCurrent) - 21usize];
    ["Offset of field: ft_eeprom_x_series::Cbus0"]
        [::std::mem::offset_of!(ft_eeprom_x_series, Cbus0) - 22usize];
    ["Offset of field: ft_eeprom_x_series::Cbus1"]
        [::std::mem::offset_of!(ft_eeprom_x_series, Cbus1) - 23usize];
    ["Offset of field: ft_eeprom_x_series::Cbus2"]
        [::std::mem::offset_of!(ft_eeprom_x_series, Cbus2) - 24usize];
    ["Offset of field: ft_eeprom_x_series::Cbus3"]
        [::std::mem::offset_of!(ft_eeprom_x_series, Cbus3) - 25usize];
    ["Offset of field: ft_eeprom_x_series::Cbus4"]
        [::std::mem::offset_of!(ft_eeprom_x_series, Cbus4) - 26usize];
    ["Offset of field: ft_eeprom_x_series::Cbus5"]
        [::std::mem::offset_of!(ft_eeprom_x_series, Cbus5) - 27usize];
    ["Offset of field: ft_eeprom_x_series::Cbus6"]
        [::std::mem::offset_of!(ft_eeprom_x_series, Cbus6) - 28usize];
    ["Offset of field: ft_eeprom_x_series::InvertTXD"]
        [::std::mem::offset_of!(ft_eeprom_x_series, InvertTXD) - 29usize];
    ["Offset of field: ft_eeprom_x_series::InvertRXD"]
        [::std::mem::offset_of!(ft_eeprom_x_series, InvertRXD) - 30usize];
    ["Offset of field: ft_eeprom_x_series::InvertRTS"]
        [::std::mem::offset_of!(ft_eeprom_x_series, InvertRTS) - 31usize];
    ["Offset of field: ft_eeprom_x_series::InvertCTS"]
        [::std::mem::offset_of!(ft_eeprom_x_series, InvertCTS) - 32usize];
    ["Offset of field: ft_eeprom_x_series::InvertDTR"]
        [::std::mem::offset_of!(ft_eeprom_x_series, InvertDTR) - 33usize];
    ["Offset of field: ft_eeprom_x_series::InvertDSR"]
        [::std::mem::offset_of!(ft_eeprom_x_series, InvertDSR) - 34usize];
    ["Offset of field: ft_eeprom_x_series::InvertDCD"]
        [::std::mem::offset_of!(ft_eeprom_x_series, InvertDCD) - 35usize];
    ["Offset of field: ft_eeprom_x_series::InvertRI"]
        [::std::mem::offset_of!(ft_eeprom_x_series, InvertRI) - 36usize];
    ["Offset of field: ft_eeprom_x_series::BCDEnable"]
        [::std::mem::offset_of!(ft_eeprom_x_series, BCDEnable) - 37usize];
    ["Offset of field: ft_eeprom_x_series::BCDForceCbusPWREN"]
        [::std::mem::offset_of!(ft_eeprom_x_series, BCDForceCbusPWREN) - 38usize];
    ["Offset of field: ft_eeprom_x_series::BCDDisableSleep"]
        [::std::mem::offset_of!(ft_eeprom_x_series, BCDDisableSleep) - 39usize];
    ["Offset of field: ft_eeprom_x_series::I2CSlaveAddress"]
        [::std::mem::offset_of!(ft_eeprom_x_series, I2CSlaveAddress) - 40usize];
    ["Offset of field: ft_eeprom_x_series::I2CDeviceId"]
        [::std::mem::offset_of!(ft_eeprom_x_series, I2CDeviceId) - 44usize];
    ["Offset of field: ft_eeprom_x_series::I2CDisableSchmitt"]
        [::std::mem::offset_of!(ft_eeprom_x_series, I2CDisableSchmitt) - 48usize];
    ["Offset of field: ft_eeprom_x_series::FT1248Cpol"]
        [::std::mem::offset_of!(ft_eeprom_x_series, FT1248Cpol) - 49usize];
    ["Offset of field: ft_eeprom_x_series::FT1248Lsb"]
        [::std::mem::offset_of!(ft_eeprom_x_series, FT1248Lsb) - 50usize];
    ["Offset of field: ft_eeprom_x_series::FT1248FlowControl"]
        [::std::mem::offset_of!(ft_eeprom_x_series, FT1248FlowControl) - 51usize];
    ["Offset of field: ft_eeprom_x_series::RS485EchoSuppress"]
        [::std::mem::offset_of!(ft_eeprom_x_series, RS485EchoSuppress) - 52usize];
    ["Offset of field: ft_eeprom_x_series::PowerSaveEnable"]
        [::std::mem::offset_of!(ft_eeprom_x_series, PowerSaveEnable) - 53usize];
    ["Offset of field: ft_eeprom_x_series::DriverType"]
        [::std::mem::offset_of!(ft_eeprom_x_series, DriverType) - 54usize];
};
pub type FT_EEPROM_X_SERIES = ft_eeprom_x_series;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ft_eeprom_4222h {
    pub common: FT_EEPROM_HEADER,
    pub Revision: CHAR,
    pub I2C_Slave_Address: UCHAR,
    pub SPISuspend: UCHAR,
    pub SuspendOutPol: UCHAR,
    pub EnableSuspendOut: UCHAR,
    pub Clock_SlowSlew: UCHAR,
    pub Clock_Drive: UCHAR,
    pub IO0_SlowSlew: UCHAR,
    pub IO1_SlowSlew: UCHAR,
    pub IO2_SlowSlew: UCHAR,
    pub IO3_SlowSlew: UCHAR,
    pub IO_Drive: UCHAR,
    pub SlaveSelect_PullUp: UCHAR,
    pub SlaveSelect_PullDown: UCHAR,
    pub SlaveSelect_Drive: UCHAR,
    pub SlaveSelect_SlowSlew: UCHAR,
    pub MISO_Suspend: UCHAR,
    pub SIMO_Suspend: UCHAR,
    pub IO2_IO3_Suspend: UCHAR,
    pub SlaveSelect_Suspend: UCHAR,
    pub GPIO0_Drive: UCHAR,
    pub GPIO1_Drive: UCHAR,
    pub GPIO2_Drive: UCHAR,
    pub GPIO3_Drive: UCHAR,
    pub GPIO0_SlowSlew: UCHAR,
    pub GPIO1_SlowSlew: UCHAR,
    pub GPIO2_SlowSlew: UCHAR,
    pub GPIO3_SlowSlew: UCHAR,
    pub GPIO0_PullDown: UCHAR,
    pub GPIO1_PullDown: UCHAR,
    pub GPIO2_PullDown: UCHAR,
    pub GPIO3_PullDown: UCHAR,
    pub GPIO0_PullUp: UCHAR,
    pub GPIO1_PullUp: UCHAR,
    pub GPIO2_PullUp: UCHAR,
    pub GPIO3_PullUp: UCHAR,
    pub GPIO0_OpenDrain: UCHAR,
    pub GPIO1_OpenDrain: UCHAR,
    pub GPIO2_OpenDrain: UCHAR,
    pub GPIO3_OpenDrain: UCHAR,
    pub GPIO0_Suspend: UCHAR,
    pub GPIO1_Suspend: UCHAR,
    pub GPIO2_Suspend: UCHAR,
    pub GPIO3_Suspend: UCHAR,
    pub FallingEdge: UCHAR,
    pub BCD_Disable: UCHAR,
    pub BCD_OutputActiveLow: UCHAR,
    pub BCD_Drive: UCHAR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ft_eeprom_4222h"][::std::mem::size_of::<ft_eeprom_4222h>() - 64usize];
    ["Alignment of ft_eeprom_4222h"][::std::mem::align_of::<ft_eeprom_4222h>() - 4usize];
    ["Offset of field: ft_eeprom_4222h::common"]
        [::std::mem::offset_of!(ft_eeprom_4222h, common) - 0usize];
    ["Offset of field: ft_eeprom_4222h::Revision"]
        [::std::mem::offset_of!(ft_eeprom_4222h, Revision) - 16usize];
    ["Offset of field: ft_eeprom_4222h::I2C_Slave_Address"]
        [::std::mem::offset_of!(ft_eeprom_4222h, I2C_Slave_Address) - 17usize];
    ["Offset of field: ft_eeprom_4222h::SPISuspend"]
        [::std::mem::offset_of!(ft_eeprom_4222h, SPISuspend) - 18usize];
    ["Offset of field: ft_eeprom_4222h::SuspendOutPol"]
        [::std::mem::offset_of!(ft_eeprom_4222h, SuspendOutPol) - 19usize];
    ["Offset of field: ft_eeprom_4222h::EnableSuspendOut"]
        [::std::mem::offset_of!(ft_eeprom_4222h, EnableSuspendOut) - 20usize];
    ["Offset of field: ft_eeprom_4222h::Clock_SlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_4222h, Clock_SlowSlew) - 21usize];
    ["Offset of field: ft_eeprom_4222h::Clock_Drive"]
        [::std::mem::offset_of!(ft_eeprom_4222h, Clock_Drive) - 22usize];
    ["Offset of field: ft_eeprom_4222h::IO0_SlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_4222h, IO0_SlowSlew) - 23usize];
    ["Offset of field: ft_eeprom_4222h::IO1_SlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_4222h, IO1_SlowSlew) - 24usize];
    ["Offset of field: ft_eeprom_4222h::IO2_SlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_4222h, IO2_SlowSlew) - 25usize];
    ["Offset of field: ft_eeprom_4222h::IO3_SlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_4222h, IO3_SlowSlew) - 26usize];
    ["Offset of field: ft_eeprom_4222h::IO_Drive"]
        [::std::mem::offset_of!(ft_eeprom_4222h, IO_Drive) - 27usize];
    ["Offset of field: ft_eeprom_4222h::SlaveSelect_PullUp"]
        [::std::mem::offset_of!(ft_eeprom_4222h, SlaveSelect_PullUp) - 28usize];
    ["Offset of field: ft_eeprom_4222h::SlaveSelect_PullDown"]
        [::std::mem::offset_of!(ft_eeprom_4222h, SlaveSelect_PullDown) - 29usize];
    ["Offset of field: ft_eeprom_4222h::SlaveSelect_Drive"]
        [::std::mem::offset_of!(ft_eeprom_4222h, SlaveSelect_Drive) - 30usize];
    ["Offset of field: ft_eeprom_4222h::SlaveSelect_SlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_4222h, SlaveSelect_SlowSlew) - 31usize];
    ["Offset of field: ft_eeprom_4222h::MISO_Suspend"]
        [::std::mem::offset_of!(ft_eeprom_4222h, MISO_Suspend) - 32usize];
    ["Offset of field: ft_eeprom_4222h::SIMO_Suspend"]
        [::std::mem::offset_of!(ft_eeprom_4222h, SIMO_Suspend) - 33usize];
    ["Offset of field: ft_eeprom_4222h::IO2_IO3_Suspend"]
        [::std::mem::offset_of!(ft_eeprom_4222h, IO2_IO3_Suspend) - 34usize];
    ["Offset of field: ft_eeprom_4222h::SlaveSelect_Suspend"]
        [::std::mem::offset_of!(ft_eeprom_4222h, SlaveSelect_Suspend) - 35usize];
    ["Offset of field: ft_eeprom_4222h::GPIO0_Drive"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO0_Drive) - 36usize];
    ["Offset of field: ft_eeprom_4222h::GPIO1_Drive"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO1_Drive) - 37usize];
    ["Offset of field: ft_eeprom_4222h::GPIO2_Drive"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO2_Drive) - 38usize];
    ["Offset of field: ft_eeprom_4222h::GPIO3_Drive"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO3_Drive) - 39usize];
    ["Offset of field: ft_eeprom_4222h::GPIO0_SlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO0_SlowSlew) - 40usize];
    ["Offset of field: ft_eeprom_4222h::GPIO1_SlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO1_SlowSlew) - 41usize];
    ["Offset of field: ft_eeprom_4222h::GPIO2_SlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO2_SlowSlew) - 42usize];
    ["Offset of field: ft_eeprom_4222h::GPIO3_SlowSlew"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO3_SlowSlew) - 43usize];
    ["Offset of field: ft_eeprom_4222h::GPIO0_PullDown"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO0_PullDown) - 44usize];
    ["Offset of field: ft_eeprom_4222h::GPIO1_PullDown"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO1_PullDown) - 45usize];
    ["Offset of field: ft_eeprom_4222h::GPIO2_PullDown"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO2_PullDown) - 46usize];
    ["Offset of field: ft_eeprom_4222h::GPIO3_PullDown"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO3_PullDown) - 47usize];
    ["Offset of field: ft_eeprom_4222h::GPIO0_PullUp"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO0_PullUp) - 48usize];
    ["Offset of field: ft_eeprom_4222h::GPIO1_PullUp"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO1_PullUp) - 49usize];
    ["Offset of field: ft_eeprom_4222h::GPIO2_PullUp"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO2_PullUp) - 50usize];
    ["Offset of field: ft_eeprom_4222h::GPIO3_PullUp"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO3_PullUp) - 51usize];
    ["Offset of field: ft_eeprom_4222h::GPIO0_OpenDrain"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO0_OpenDrain) - 52usize];
    ["Offset of field: ft_eeprom_4222h::GPIO1_OpenDrain"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO1_OpenDrain) - 53usize];
    ["Offset of field: ft_eeprom_4222h::GPIO2_OpenDrain"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO2_OpenDrain) - 54usize];
    ["Offset of field: ft_eeprom_4222h::GPIO3_OpenDrain"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO3_OpenDrain) - 55usize];
    ["Offset of field: ft_eeprom_4222h::GPIO0_Suspend"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO0_Suspend) - 56usize];
    ["Offset of field: ft_eeprom_4222h::GPIO1_Suspend"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO1_Suspend) - 57usize];
    ["Offset of field: ft_eeprom_4222h::GPIO2_Suspend"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO2_Suspend) - 58usize];
    ["Offset of field: ft_eeprom_4222h::GPIO3_Suspend"]
        [::std::mem::offset_of!(ft_eeprom_4222h, GPIO3_Suspend) - 59usize];
    ["Offset of field: ft_eeprom_4222h::FallingEdge"]
        [::std::mem::offset_of!(ft_eeprom_4222h, FallingEdge) - 60usize];
    ["Offset of field: ft_eeprom_4222h::BCD_Disable"]
        [::std::mem::offset_of!(ft_eeprom_4222h, BCD_Disable) - 61usize];
    ["Offset of field: ft_eeprom_4222h::BCD_OutputActiveLow"]
        [::std::mem::offset_of!(ft_eeprom_4222h, BCD_OutputActiveLow) - 62usize];
    ["Offset of field: ft_eeprom_4222h::BCD_Drive"]
        [::std::mem::offset_of!(ft_eeprom_4222h, BCD_Drive) - 63usize];
};
pub type FT_EEPROM_4222H = ft_eeprom_4222h;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ft_eeprom_PD_PDO_mv_ma {
    pub PDO1ma: USHORT,
    pub PDO1mv: USHORT,
    pub PDO2ma: USHORT,
    pub PDO2mv: USHORT,
    pub PDO3ma: USHORT,
    pub PDO3mv: USHORT,
    pub PDO4ma: USHORT,
    pub PDO4mv: USHORT,
    pub PDO5ma: USHORT,
    pub PDO5mv: USHORT,
    pub PDO6ma: USHORT,
    pub PDO6mv: USHORT,
    pub PDO7ma: USHORT,
    pub PDO7mv: USHORT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ft_eeprom_PD_PDO_mv_ma"][::std::mem::size_of::<ft_eeprom_PD_PDO_mv_ma>() - 28usize];
    ["Alignment of ft_eeprom_PD_PDO_mv_ma"]
        [::std::mem::align_of::<ft_eeprom_PD_PDO_mv_ma>() - 2usize];
    ["Offset of field: ft_eeprom_PD_PDO_mv_ma::PDO1ma"]
        [::std::mem::offset_of!(ft_eeprom_PD_PDO_mv_ma, PDO1ma) - 0usize];
    ["Offset of field: ft_eeprom_PD_PDO_mv_ma::PDO1mv"]
        [::std::mem::offset_of!(ft_eeprom_PD_PDO_mv_ma, PDO1mv) - 2usize];
    ["Offset of field: ft_eeprom_PD_PDO_mv_ma::PDO2ma"]
        [::std::mem::offset_of!(ft_eeprom_PD_PDO_mv_ma, PDO2ma) - 4usize];
    ["Offset of field: ft_eeprom_PD_PDO_mv_ma::PDO2mv"]
        [::std::mem::offset_of!(ft_eeprom_PD_PDO_mv_ma, PDO2mv) - 6usize];
    ["Offset of field: ft_eeprom_PD_PDO_mv_ma::PDO3ma"]
        [::std::mem::offset_of!(ft_eeprom_PD_PDO_mv_ma, PDO3ma) - 8usize];
    ["Offset of field: ft_eeprom_PD_PDO_mv_ma::PDO3mv"]
        [::std::mem::offset_of!(ft_eeprom_PD_PDO_mv_ma, PDO3mv) - 10usize];
    ["Offset of field: ft_eeprom_PD_PDO_mv_ma::PDO4ma"]
        [::std::mem::offset_of!(ft_eeprom_PD_PDO_mv_ma, PDO4ma) - 12usize];
    ["Offset of field: ft_eeprom_PD_PDO_mv_ma::PDO4mv"]
        [::std::mem::offset_of!(ft_eeprom_PD_PDO_mv_ma, PDO4mv) - 14usize];
    ["Offset of field: ft_eeprom_PD_PDO_mv_ma::PDO5ma"]
        [::std::mem::offset_of!(ft_eeprom_PD_PDO_mv_ma, PDO5ma) - 16usize];
    ["Offset of field: ft_eeprom_PD_PDO_mv_ma::PDO5mv"]
        [::std::mem::offset_of!(ft_eeprom_PD_PDO_mv_ma, PDO5mv) - 18usize];
    ["Offset of field: ft_eeprom_PD_PDO_mv_ma::PDO6ma"]
        [::std::mem::offset_of!(ft_eeprom_PD_PDO_mv_ma, PDO6ma) - 20usize];
    ["Offset of field: ft_eeprom_PD_PDO_mv_ma::PDO6mv"]
        [::std::mem::offset_of!(ft_eeprom_PD_PDO_mv_ma, PDO6mv) - 22usize];
    ["Offset of field: ft_eeprom_PD_PDO_mv_ma::PDO7ma"]
        [::std::mem::offset_of!(ft_eeprom_PD_PDO_mv_ma, PDO7ma) - 24usize];
    ["Offset of field: ft_eeprom_PD_PDO_mv_ma::PDO7mv"]
        [::std::mem::offset_of!(ft_eeprom_PD_PDO_mv_ma, PDO7mv) - 26usize];
};
pub type FT_EEPROM_PD_PDO_mv_ma = ft_eeprom_PD_PDO_mv_ma;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ft_eeprom_pd {
    pub srprs: UCHAR,
    pub sraprs: UCHAR,
    pub srrprs: UCHAR,
    pub saprs: UCHAR,
    pub vconns: UCHAR,
    pub passthru: UCHAR,
    pub extmcu: UCHAR,
    pub pd2en: UCHAR,
    pub pd1autoclk: UCHAR,
    pub pd2autoclk: UCHAR,
    pub useefuse: UCHAR,
    pub extvconn: UCHAR,
    pub count: UCHAR,
    pub gpio1: UCHAR,
    pub gpio2: UCHAR,
    pub gpio3: UCHAR,
    pub gpio4: UCHAR,
    pub gpio5: UCHAR,
    pub gpio6: UCHAR,
    pub gpio7: UCHAR,
    pub pd1lden: UCHAR,
    pub pd2lden: UCHAR,
    pub dispin: UCHAR,
    pub disenbm: UCHAR,
    pub disdisbm: UCHAR,
    pub ccselect: UCHAR,
    pub iset1: UCHAR,
    pub iset2: UCHAR,
    pub iset3: UCHAR,
    pub extiset: UCHAR,
    pub isetpd2: UCHAR,
    pub iseten: UCHAR,
    pub PDO1_GPIO: [UCHAR; 7usize],
    pub PDO2_GPIO: [UCHAR; 7usize],
    pub PDO3_GPIO: [UCHAR; 7usize],
    pub PDO4_GPIO: [UCHAR; 7usize],
    pub PDO5_GPIO: [UCHAR; 7usize],
    pub PDO6_GPIO: [UCHAR; 7usize],
    pub PDO7_GPIO: [UCHAR; 7usize],
    pub VSET0V_GPIO: [UCHAR; 7usize],
    pub VSAFE5V_GPIO: [UCHAR; 7usize],
    pub BM_PDO_Sink: FT_EEPROM_PD_PDO_mv_ma,
    pub BM_PDO_Source: FT_EEPROM_PD_PDO_mv_ma,
    pub BM_PDO_Sink_2: FT_EEPROM_PD_PDO_mv_ma,
    pub srt: UCHAR,
    pub hrt: UCHAR,
    pub sct: UCHAR,
    pub dit: UCHAR,
    pub srcrt: USHORT,
    pub trt: USHORT,
    pub sofft: USHORT,
    pub nrt: USHORT,
    pub swct: USHORT,
    pub snkrt: USHORT,
    pub dt: UCHAR,
    pub cnst: UCHAR,
    pub it: USHORT,
    pub i2caddr: UCHAR,
    pub prou: UINT,
    pub trim1: UINT,
    pub trim2: UINT,
    pub extdc: UCHAR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ft_eeprom_pd"][::std::mem::size_of::<ft_eeprom_pd>() - 220usize];
    ["Alignment of ft_eeprom_pd"][::std::mem::align_of::<ft_eeprom_pd>() - 4usize];
    ["Offset of field: ft_eeprom_pd::srprs"][::std::mem::offset_of!(ft_eeprom_pd, srprs) - 0usize];
    ["Offset of field: ft_eeprom_pd::sraprs"]
        [::std::mem::offset_of!(ft_eeprom_pd, sraprs) - 1usize];
    ["Offset of field: ft_eeprom_pd::srrprs"]
        [::std::mem::offset_of!(ft_eeprom_pd, srrprs) - 2usize];
    ["Offset of field: ft_eeprom_pd::saprs"][::std::mem::offset_of!(ft_eeprom_pd, saprs) - 3usize];
    ["Offset of field: ft_eeprom_pd::vconns"]
        [::std::mem::offset_of!(ft_eeprom_pd, vconns) - 4usize];
    ["Offset of field: ft_eeprom_pd::passthru"]
        [::std::mem::offset_of!(ft_eeprom_pd, passthru) - 5usize];
    ["Offset of field: ft_eeprom_pd::extmcu"]
        [::std::mem::offset_of!(ft_eeprom_pd, extmcu) - 6usize];
    ["Offset of field: ft_eeprom_pd::pd2en"][::std::mem::offset_of!(ft_eeprom_pd, pd2en) - 7usize];
    ["Offset of field: ft_eeprom_pd::pd1autoclk"]
        [::std::mem::offset_of!(ft_eeprom_pd, pd1autoclk) - 8usize];
    ["Offset of field: ft_eeprom_pd::pd2autoclk"]
        [::std::mem::offset_of!(ft_eeprom_pd, pd2autoclk) - 9usize];
    ["Offset of field: ft_eeprom_pd::useefuse"]
        [::std::mem::offset_of!(ft_eeprom_pd, useefuse) - 10usize];
    ["Offset of field: ft_eeprom_pd::extvconn"]
        [::std::mem::offset_of!(ft_eeprom_pd, extvconn) - 11usize];
    ["Offset of field: ft_eeprom_pd::count"][::std::mem::offset_of!(ft_eeprom_pd, count) - 12usize];
    ["Offset of field: ft_eeprom_pd::gpio1"][::std::mem::offset_of!(ft_eeprom_pd, gpio1) - 13usize];
    ["Offset of field: ft_eeprom_pd::gpio2"][::std::mem::offset_of!(ft_eeprom_pd, gpio2) - 14usize];
    ["Offset of field: ft_eeprom_pd::gpio3"][::std::mem::offset_of!(ft_eeprom_pd, gpio3) - 15usize];
    ["Offset of field: ft_eeprom_pd::gpio4"][::std::mem::offset_of!(ft_eeprom_pd, gpio4) - 16usize];
    ["Offset of field: ft_eeprom_pd::gpio5"][::std::mem::offset_of!(ft_eeprom_pd, gpio5) - 17usize];
    ["Offset of field: ft_eeprom_pd::gpio6"][::std::mem::offset_of!(ft_eeprom_pd, gpio6) - 18usize];
    ["Offset of field: ft_eeprom_pd::gpio7"][::std::mem::offset_of!(ft_eeprom_pd, gpio7) - 19usize];
    ["Offset of field: ft_eeprom_pd::pd1lden"]
        [::std::mem::offset_of!(ft_eeprom_pd, pd1lden) - 20usize];
    ["Offset of field: ft_eeprom_pd::pd2lden"]
        [::std::mem::offset_of!(ft_eeprom_pd, pd2lden) - 21usize];
    ["Offset of field: ft_eeprom_pd::dispin"]
        [::std::mem::offset_of!(ft_eeprom_pd, dispin) - 22usize];
    ["Offset of field: ft_eeprom_pd::disenbm"]
        [::std::mem::offset_of!(ft_eeprom_pd, disenbm) - 23usize];
    ["Offset of field: ft_eeprom_pd::disdisbm"]
        [::std::mem::offset_of!(ft_eeprom_pd, disdisbm) - 24usize];
    ["Offset of field: ft_eeprom_pd::ccselect"]
        [::std::mem::offset_of!(ft_eeprom_pd, ccselect) - 25usize];
    ["Offset of field: ft_eeprom_pd::iset1"][::std::mem::offset_of!(ft_eeprom_pd, iset1) - 26usize];
    ["Offset of field: ft_eeprom_pd::iset2"][::std::mem::offset_of!(ft_eeprom_pd, iset2) - 27usize];
    ["Offset of field: ft_eeprom_pd::iset3"][::std::mem::offset_of!(ft_eeprom_pd, iset3) - 28usize];
    ["Offset of field: ft_eeprom_pd::extiset"]
        [::std::mem::offset_of!(ft_eeprom_pd, extiset) - 29usize];
    ["Offset of field: ft_eeprom_pd::isetpd2"]
        [::std::mem::offset_of!(ft_eeprom_pd, isetpd2) - 30usize];
    ["Offset of field: ft_eeprom_pd::iseten"]
        [::std::mem::offset_of!(ft_eeprom_pd, iseten) - 31usize];
    ["Offset of field: ft_eeprom_pd::PDO1_GPIO"]
        [::std::mem::offset_of!(ft_eeprom_pd, PDO1_GPIO) - 32usize];
    ["Offset of field: ft_eeprom_pd::PDO2_GPIO"]
        [::std::mem::offset_of!(ft_eeprom_pd, PDO2_GPIO) - 39usize];
    ["Offset of field: ft_eeprom_pd::PDO3_GPIO"]
        [::std::mem::offset_of!(ft_eeprom_pd, PDO3_GPIO) - 46usize];
    ["Offset of field: ft_eeprom_pd::PDO4_GPIO"]
        [::std::mem::offset_of!(ft_eeprom_pd, PDO4_GPIO) - 53usize];
    ["Offset of field: ft_eeprom_pd::PDO5_GPIO"]
        [::std::mem::offset_of!(ft_eeprom_pd, PDO5_GPIO) - 60usize];
    ["Offset of field: ft_eeprom_pd::PDO6_GPIO"]
        [::std::mem::offset_of!(ft_eeprom_pd, PDO6_GPIO) - 67usize];
    ["Offset of field: ft_eeprom_pd::PDO7_GPIO"]
        [::std::mem::offset_of!(ft_eeprom_pd, PDO7_GPIO) - 74usize];
    ["Offset of field: ft_eeprom_pd::VSET0V_GPIO"]
        [::std::mem::offset_of!(ft_eeprom_pd, VSET0V_GPIO) - 81usize];
    ["Offset of field: ft_eeprom_pd::VSAFE5V_GPIO"]
        [::std::mem::offset_of!(ft_eeprom_pd, VSAFE5V_GPIO) - 88usize];
    ["Offset of field: ft_eeprom_pd::BM_PDO_Sink"]
        [::std::mem::offset_of!(ft_eeprom_pd, BM_PDO_Sink) - 96usize];
    ["Offset of field: ft_eeprom_pd::BM_PDO_Source"]
        [::std::mem::offset_of!(ft_eeprom_pd, BM_PDO_Source) - 124usize];
    ["Offset of field: ft_eeprom_pd::BM_PDO_Sink_2"]
        [::std::mem::offset_of!(ft_eeprom_pd, BM_PDO_Sink_2) - 152usize];
    ["Offset of field: ft_eeprom_pd::srt"][::std::mem::offset_of!(ft_eeprom_pd, srt) - 180usize];
    ["Offset of field: ft_eeprom_pd::hrt"][::std::mem::offset_of!(ft_eeprom_pd, hrt) - 181usize];
    ["Offset of field: ft_eeprom_pd::sct"][::std::mem::offset_of!(ft_eeprom_pd, sct) - 182usize];
    ["Offset of field: ft_eeprom_pd::dit"][::std::mem::offset_of!(ft_eeprom_pd, dit) - 183usize];
    ["Offset of field: ft_eeprom_pd::srcrt"]
        [::std::mem::offset_of!(ft_eeprom_pd, srcrt) - 184usize];
    ["Offset of field: ft_eeprom_pd::trt"][::std::mem::offset_of!(ft_eeprom_pd, trt) - 186usize];
    ["Offset of field: ft_eeprom_pd::sofft"]
        [::std::mem::offset_of!(ft_eeprom_pd, sofft) - 188usize];
    ["Offset of field: ft_eeprom_pd::nrt"][::std::mem::offset_of!(ft_eeprom_pd, nrt) - 190usize];
    ["Offset of field: ft_eeprom_pd::swct"][::std::mem::offset_of!(ft_eeprom_pd, swct) - 192usize];
    ["Offset of field: ft_eeprom_pd::snkrt"]
        [::std::mem::offset_of!(ft_eeprom_pd, snkrt) - 194usize];
    ["Offset of field: ft_eeprom_pd::dt"][::std::mem::offset_of!(ft_eeprom_pd, dt) - 196usize];
    ["Offset of field: ft_eeprom_pd::cnst"][::std::mem::offset_of!(ft_eeprom_pd, cnst) - 197usize];
    ["Offset of field: ft_eeprom_pd::it"][::std::mem::offset_of!(ft_eeprom_pd, it) - 198usize];
    ["Offset of field: ft_eeprom_pd::i2caddr"]
        [::std::mem::offset_of!(ft_eeprom_pd, i2caddr) - 200usize];
    ["Offset of field: ft_eeprom_pd::prou"][::std::mem::offset_of!(ft_eeprom_pd, prou) - 204usize];
    ["Offset of field: ft_eeprom_pd::trim1"]
        [::std::mem::offset_of!(ft_eeprom_pd, trim1) - 208usize];
    ["Offset of field: ft_eeprom_pd::trim2"]
        [::std::mem::offset_of!(ft_eeprom_pd, trim2) - 212usize];
    ["Offset of field: ft_eeprom_pd::extdc"]
        [::std::mem::offset_of!(ft_eeprom_pd, extdc) - 216usize];
};
pub type FT_EEPROM_PD = ft_eeprom_pd;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _ft_eeprom_2233hp {
    pub ft2232h: FT_EEPROM_2232H,
    pub pd: FT_EEPROM_PD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ft_eeprom_2233hp"][::std::mem::size_of::<_ft_eeprom_2233hp>() - 260usize];
    ["Alignment of _ft_eeprom_2233hp"][::std::mem::align_of::<_ft_eeprom_2233hp>() - 4usize];
    ["Offset of field: _ft_eeprom_2233hp::ft2232h"]
        [::std::mem::offset_of!(_ft_eeprom_2233hp, ft2232h) - 0usize];
    ["Offset of field: _ft_eeprom_2233hp::pd"]
        [::std::mem::offset_of!(_ft_eeprom_2233hp, pd) - 40usize];
};
pub type FT_EEPROM_2233HP = _ft_eeprom_2233hp;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _ft_eeprom_4233hp {
    pub ft4232h: FT_EEPROM_4232H,
    pub pd: FT_EEPROM_PD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ft_eeprom_4233hp"][::std::mem::size_of::<_ft_eeprom_4233hp>() - 256usize];
    ["Alignment of _ft_eeprom_4233hp"][::std::mem::align_of::<_ft_eeprom_4233hp>() - 4usize];
    ["Offset of field: _ft_eeprom_4233hp::ft4232h"]
        [::std::mem::offset_of!(_ft_eeprom_4233hp, ft4232h) - 0usize];
    ["Offset of field: _ft_eeprom_4233hp::pd"]
        [::std::mem::offset_of!(_ft_eeprom_4233hp, pd) - 36usize];
};
pub type FT_EEPROM_4233HP = _ft_eeprom_4233hp;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _ft_eeprom_2232hp {
    pub ft2232h: FT_EEPROM_2232H,
    pub pd: FT_EEPROM_PD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ft_eeprom_2232hp"][::std::mem::size_of::<_ft_eeprom_2232hp>() - 260usize];
    ["Alignment of _ft_eeprom_2232hp"][::std::mem::align_of::<_ft_eeprom_2232hp>() - 4usize];
    ["Offset of field: _ft_eeprom_2232hp::ft2232h"]
        [::std::mem::offset_of!(_ft_eeprom_2232hp, ft2232h) - 0usize];
    ["Offset of field: _ft_eeprom_2232hp::pd"]
        [::std::mem::offset_of!(_ft_eeprom_2232hp, pd) - 40usize];
};
pub type FT_EEPROM_2232HP = _ft_eeprom_2232hp;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _ft_eeprom_4232hp {
    pub ft4232h: FT_EEPROM_4232H,
    pub pd: FT_EEPROM_PD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ft_eeprom_4232hp"][::std::mem::size_of::<_ft_eeprom_4232hp>() - 256usize];
    ["Alignment of _ft_eeprom_4232hp"][::std::mem::align_of::<_ft_eeprom_4232hp>() - 4usize];
    ["Offset of field: _ft_eeprom_4232hp::ft4232h"]
        [::std::mem::offset_of!(_ft_eeprom_4232hp, ft4232h) - 0usize];
    ["Offset of field: _ft_eeprom_4232hp::pd"]
        [::std::mem::offset_of!(_ft_eeprom_4232hp, pd) - 36usize];
};
pub type FT_EEPROM_4232HP = _ft_eeprom_4232hp;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _ft_eeprom_233hp {
    pub ft232h: FT_EEPROM_232H,
    pub pd: FT_EEPROM_PD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ft_eeprom_233hp"][::std::mem::size_of::<_ft_eeprom_233hp>() - 264usize];
    ["Alignment of _ft_eeprom_233hp"][::std::mem::align_of::<_ft_eeprom_233hp>() - 4usize];
    ["Offset of field: _ft_eeprom_233hp::ft232h"]
        [::std::mem::offset_of!(_ft_eeprom_233hp, ft232h) - 0usize];
    ["Offset of field: _ft_eeprom_233hp::pd"]
        [::std::mem::offset_of!(_ft_eeprom_233hp, pd) - 44usize];
};
pub type FT_EEPROM_233HP = _ft_eeprom_233hp;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _ft_eeprom_232hp {
    pub ft232h: FT_EEPROM_232H,
    pub pd: FT_EEPROM_PD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ft_eeprom_232hp"][::std::mem::size_of::<_ft_eeprom_232hp>() - 264usize];
    ["Alignment of _ft_eeprom_232hp"][::std::mem::align_of::<_ft_eeprom_232hp>() - 4usize];
    ["Offset of field: _ft_eeprom_232hp::ft232h"]
        [::std::mem::offset_of!(_ft_eeprom_232hp, ft232h) - 0usize];
    ["Offset of field: _ft_eeprom_232hp::pd"]
        [::std::mem::offset_of!(_ft_eeprom_232hp, pd) - 44usize];
};
pub type FT_EEPROM_232HP = _ft_eeprom_232hp;
unsafe extern "stdcall" {
    pub fn FT_EEPROM_Read(
        ftHandle: FT_HANDLE,
        eepromData: *mut ::std::os::raw::c_void,
        eepromDataSize: DWORD,
        Manufacturer: *mut ::std::os::raw::c_char,
        ManufacturerId: *mut ::std::os::raw::c_char,
        Description: *mut ::std::os::raw::c_char,
        SerialNumber: *mut ::std::os::raw::c_char,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_EEPROM_Program(
        ftHandle: FT_HANDLE,
        eepromData: *mut ::std::os::raw::c_void,
        eepromDataSize: DWORD,
        Manufacturer: *mut ::std::os::raw::c_char,
        ManufacturerId: *mut ::std::os::raw::c_char,
        Description: *mut ::std::os::raw::c_char,
        SerialNumber: *mut ::std::os::raw::c_char,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_SetLatencyTimer(ftHandle: FT_HANDLE, ucLatency: UCHAR) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_GetLatencyTimer(ftHandle: FT_HANDLE, pucLatency: PUCHAR) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_SetBitMode(ftHandle: FT_HANDLE, ucMask: UCHAR, ucEnable: UCHAR) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_GetBitMode(ftHandle: FT_HANDLE, pucMode: PUCHAR) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_SetUSBParameters(
        ftHandle: FT_HANDLE,
        ulInTransferSize: ULONG,
        ulOutTransferSize: ULONG,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_SetDeadmanTimeout(ftHandle: FT_HANDLE, ulDeadmanTimeout: ULONG) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_GetDeviceInfo(
        ftHandle: FT_HANDLE,
        lpftDevice: *mut FT_DEVICE,
        lpdwID: LPDWORD,
        SerialNumber: PCHAR,
        Description: PCHAR,
        Dummy: LPVOID,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_StopInTask(ftHandle: FT_HANDLE) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_RestartInTask(ftHandle: FT_HANDLE) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_SetResetPipeRetryCount(ftHandle: FT_HANDLE, dwCount: DWORD) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_ResetPort(ftHandle: FT_HANDLE) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_CyclePort(ftHandle: FT_HANDLE) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_W32_CreateFile(
        lpszName: LPCTSTR,
        dwAccess: DWORD,
        dwShareMode: DWORD,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        dwCreate: DWORD,
        dwAttrsAndFlags: DWORD,
        hTemplate: HANDLE,
    ) -> FT_HANDLE;
}
unsafe extern "stdcall" {
    pub fn FT_W32_CloseHandle(ftHandle: FT_HANDLE) -> BOOL;
}
unsafe extern "stdcall" {
    pub fn FT_W32_ReadFile(
        ftHandle: FT_HANDLE,
        lpBuffer: LPVOID,
        nBufferSize: DWORD,
        lpBytesReturned: LPDWORD,
        lpOverlapped: LPOVERLAPPED,
    ) -> BOOL;
}
unsafe extern "stdcall" {
    pub fn FT_W32_WriteFile(
        ftHandle: FT_HANDLE,
        lpBuffer: LPVOID,
        nBufferSize: DWORD,
        lpBytesWritten: LPDWORD,
        lpOverlapped: LPOVERLAPPED,
    ) -> BOOL;
}
unsafe extern "stdcall" {
    pub fn FT_W32_GetLastError(ftHandle: FT_HANDLE) -> DWORD;
}
unsafe extern "stdcall" {
    pub fn FT_W32_GetOverlappedResult(
        ftHandle: FT_HANDLE,
        lpOverlapped: LPOVERLAPPED,
        lpdwBytesTransferred: LPDWORD,
        bWait: BOOL,
    ) -> BOOL;
}
unsafe extern "stdcall" {
    pub fn FT_W32_CancelIo(ftHandle: FT_HANDLE) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FTCOMSTAT {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub cbInQue: DWORD,
    pub cbOutQue: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FTCOMSTAT"][::std::mem::size_of::<_FTCOMSTAT>() - 12usize];
    ["Alignment of _FTCOMSTAT"][::std::mem::align_of::<_FTCOMSTAT>() - 4usize];
    ["Offset of field: _FTCOMSTAT::cbInQue"][::std::mem::offset_of!(_FTCOMSTAT, cbInQue) - 4usize];
    ["Offset of field: _FTCOMSTAT::cbOutQue"]
        [::std::mem::offset_of!(_FTCOMSTAT, cbOutQue) - 8usize];
};
impl _FTCOMSTAT {
    #[inline]
    pub fn fCtsHold(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fCtsHold(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fCtsHold_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fCtsHold_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fDsrHold(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fDsrHold(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fDsrHold_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fDsrHold_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fRlsdHold(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fRlsdHold(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fRlsdHold_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fRlsdHold_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fXoffHold(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fXoffHold(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fXoffHold_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fXoffHold_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fXoffSent(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fXoffSent(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fXoffSent_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fXoffSent_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fEof(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fEof(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fEof_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fEof_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fTxim(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fTxim(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fTxim_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fTxim_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fReserved(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 25u8) as u32) }
    }
    #[inline]
    pub fn set_fReserved(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 25u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fReserved_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                25u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fReserved_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                25u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fCtsHold: DWORD,
        fDsrHold: DWORD,
        fRlsdHold: DWORD,
        fXoffHold: DWORD,
        fXoffSent: DWORD,
        fEof: DWORD,
        fTxim: DWORD,
        fReserved: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let fCtsHold: u32 = unsafe { ::std::mem::transmute(fCtsHold) };
            fCtsHold as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let fDsrHold: u32 = unsafe { ::std::mem::transmute(fDsrHold) };
            fDsrHold as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let fRlsdHold: u32 = unsafe { ::std::mem::transmute(fRlsdHold) };
            fRlsdHold as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let fXoffHold: u32 = unsafe { ::std::mem::transmute(fXoffHold) };
            fXoffHold as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let fXoffSent: u32 = unsafe { ::std::mem::transmute(fXoffSent) };
            fXoffSent as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let fEof: u32 = unsafe { ::std::mem::transmute(fEof) };
            fEof as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let fTxim: u32 = unsafe { ::std::mem::transmute(fTxim) };
            fTxim as u64
        });
        __bindgen_bitfield_unit.set(7usize, 25u8, {
            let fReserved: u32 = unsafe { ::std::mem::transmute(fReserved) };
            fReserved as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type LPFTCOMSTAT = *mut _FTCOMSTAT;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FTDCB {
    pub DCBlength: DWORD,
    pub BaudRate: DWORD,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub wReserved: WORD,
    pub XonLim: WORD,
    pub XoffLim: WORD,
    pub ByteSize: BYTE,
    pub Parity: BYTE,
    pub StopBits: BYTE,
    pub XonChar: ::std::os::raw::c_char,
    pub XoffChar: ::std::os::raw::c_char,
    pub ErrorChar: ::std::os::raw::c_char,
    pub EofChar: ::std::os::raw::c_char,
    pub EvtChar: ::std::os::raw::c_char,
    pub wReserved1: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FTDCB"][::std::mem::size_of::<_FTDCB>() - 28usize];
    ["Alignment of _FTDCB"][::std::mem::align_of::<_FTDCB>() - 4usize];
    ["Offset of field: _FTDCB::DCBlength"][::std::mem::offset_of!(_FTDCB, DCBlength) - 0usize];
    ["Offset of field: _FTDCB::BaudRate"][::std::mem::offset_of!(_FTDCB, BaudRate) - 4usize];
    ["Offset of field: _FTDCB::wReserved"][::std::mem::offset_of!(_FTDCB, wReserved) - 12usize];
    ["Offset of field: _FTDCB::XonLim"][::std::mem::offset_of!(_FTDCB, XonLim) - 14usize];
    ["Offset of field: _FTDCB::XoffLim"][::std::mem::offset_of!(_FTDCB, XoffLim) - 16usize];
    ["Offset of field: _FTDCB::ByteSize"][::std::mem::offset_of!(_FTDCB, ByteSize) - 18usize];
    ["Offset of field: _FTDCB::Parity"][::std::mem::offset_of!(_FTDCB, Parity) - 19usize];
    ["Offset of field: _FTDCB::StopBits"][::std::mem::offset_of!(_FTDCB, StopBits) - 20usize];
    ["Offset of field: _FTDCB::XonChar"][::std::mem::offset_of!(_FTDCB, XonChar) - 21usize];
    ["Offset of field: _FTDCB::XoffChar"][::std::mem::offset_of!(_FTDCB, XoffChar) - 22usize];
    ["Offset of field: _FTDCB::ErrorChar"][::std::mem::offset_of!(_FTDCB, ErrorChar) - 23usize];
    ["Offset of field: _FTDCB::EofChar"][::std::mem::offset_of!(_FTDCB, EofChar) - 24usize];
    ["Offset of field: _FTDCB::EvtChar"][::std::mem::offset_of!(_FTDCB, EvtChar) - 25usize];
    ["Offset of field: _FTDCB::wReserved1"][::std::mem::offset_of!(_FTDCB, wReserved1) - 26usize];
};
impl _FTDCB {
    #[inline]
    pub fn fBinary(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fBinary(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fBinary_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fBinary_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fParity(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fParity(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fParity_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fParity_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fOutxCtsFlow(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fOutxCtsFlow(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fOutxCtsFlow_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fOutxCtsFlow_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fOutxDsrFlow(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fOutxDsrFlow(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fOutxDsrFlow_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fOutxDsrFlow_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fDtrControl(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_fDtrControl(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fDtrControl_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fDtrControl_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fDsrSensitivity(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fDsrSensitivity(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fDsrSensitivity_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fDsrSensitivity_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fTXContinueOnXoff(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fTXContinueOnXoff(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fTXContinueOnXoff_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fTXContinueOnXoff_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fOutX(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fOutX(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fOutX_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fOutX_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fInX(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fInX(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fInX_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fInX_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fErrorChar(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fErrorChar(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fErrorChar_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fErrorChar_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fNull(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fNull(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fNull_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fNull_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fRtsControl(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_fRtsControl(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fRtsControl_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fRtsControl_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fAbortOnError(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fAbortOnError(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fAbortOnError_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fAbortOnError_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fDummy2(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 17u8) as u32) }
    }
    #[inline]
    pub fn set_fDummy2(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 17u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fDummy2_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                17u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fDummy2_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                17u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fBinary: DWORD,
        fParity: DWORD,
        fOutxCtsFlow: DWORD,
        fOutxDsrFlow: DWORD,
        fDtrControl: DWORD,
        fDsrSensitivity: DWORD,
        fTXContinueOnXoff: DWORD,
        fOutX: DWORD,
        fInX: DWORD,
        fErrorChar: DWORD,
        fNull: DWORD,
        fRtsControl: DWORD,
        fAbortOnError: DWORD,
        fDummy2: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let fBinary: u32 = unsafe { ::std::mem::transmute(fBinary) };
            fBinary as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let fParity: u32 = unsafe { ::std::mem::transmute(fParity) };
            fParity as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let fOutxCtsFlow: u32 = unsafe { ::std::mem::transmute(fOutxCtsFlow) };
            fOutxCtsFlow as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let fOutxDsrFlow: u32 = unsafe { ::std::mem::transmute(fOutxDsrFlow) };
            fOutxDsrFlow as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let fDtrControl: u32 = unsafe { ::std::mem::transmute(fDtrControl) };
            fDtrControl as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let fDsrSensitivity: u32 = unsafe { ::std::mem::transmute(fDsrSensitivity) };
            fDsrSensitivity as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let fTXContinueOnXoff: u32 = unsafe { ::std::mem::transmute(fTXContinueOnXoff) };
            fTXContinueOnXoff as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let fOutX: u32 = unsafe { ::std::mem::transmute(fOutX) };
            fOutX as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let fInX: u32 = unsafe { ::std::mem::transmute(fInX) };
            fInX as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let fErrorChar: u32 = unsafe { ::std::mem::transmute(fErrorChar) };
            fErrorChar as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let fNull: u32 = unsafe { ::std::mem::transmute(fNull) };
            fNull as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let fRtsControl: u32 = unsafe { ::std::mem::transmute(fRtsControl) };
            fRtsControl as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let fAbortOnError: u32 = unsafe { ::std::mem::transmute(fAbortOnError) };
            fAbortOnError as u64
        });
        __bindgen_bitfield_unit.set(15usize, 17u8, {
            let fDummy2: u32 = unsafe { ::std::mem::transmute(fDummy2) };
            fDummy2 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type LPFTDCB = *mut _FTDCB;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _FTTIMEOUTS {
    pub ReadIntervalTimeout: DWORD,
    pub ReadTotalTimeoutMultiplier: DWORD,
    pub ReadTotalTimeoutConstant: DWORD,
    pub WriteTotalTimeoutMultiplier: DWORD,
    pub WriteTotalTimeoutConstant: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FTTIMEOUTS"][::std::mem::size_of::<_FTTIMEOUTS>() - 20usize];
    ["Alignment of _FTTIMEOUTS"][::std::mem::align_of::<_FTTIMEOUTS>() - 4usize];
    ["Offset of field: _FTTIMEOUTS::ReadIntervalTimeout"]
        [::std::mem::offset_of!(_FTTIMEOUTS, ReadIntervalTimeout) - 0usize];
    ["Offset of field: _FTTIMEOUTS::ReadTotalTimeoutMultiplier"]
        [::std::mem::offset_of!(_FTTIMEOUTS, ReadTotalTimeoutMultiplier) - 4usize];
    ["Offset of field: _FTTIMEOUTS::ReadTotalTimeoutConstant"]
        [::std::mem::offset_of!(_FTTIMEOUTS, ReadTotalTimeoutConstant) - 8usize];
    ["Offset of field: _FTTIMEOUTS::WriteTotalTimeoutMultiplier"]
        [::std::mem::offset_of!(_FTTIMEOUTS, WriteTotalTimeoutMultiplier) - 12usize];
    ["Offset of field: _FTTIMEOUTS::WriteTotalTimeoutConstant"]
        [::std::mem::offset_of!(_FTTIMEOUTS, WriteTotalTimeoutConstant) - 16usize];
};
pub type FTTIMEOUTS = _FTTIMEOUTS;
unsafe extern "stdcall" {
    pub fn FT_W32_ClearCommBreak(ftHandle: FT_HANDLE) -> BOOL;
}
unsafe extern "stdcall" {
    pub fn FT_W32_ClearCommError(
        ftHandle: FT_HANDLE,
        lpdwErrors: LPDWORD,
        lpftComstat: LPFTCOMSTAT,
    ) -> BOOL;
}
unsafe extern "stdcall" {
    pub fn FT_W32_EscapeCommFunction(ftHandle: FT_HANDLE, dwFunc: DWORD) -> BOOL;
}
unsafe extern "stdcall" {
    pub fn FT_W32_GetCommModemStatus(ftHandle: FT_HANDLE, lpdwModemStatus: LPDWORD) -> BOOL;
}
unsafe extern "stdcall" {
    pub fn FT_W32_GetCommState(ftHandle: FT_HANDLE, lpftDcb: LPFTDCB) -> BOOL;
}
unsafe extern "stdcall" {
    pub fn FT_W32_GetCommTimeouts(ftHandle: FT_HANDLE, pTimeouts: *mut FTTIMEOUTS) -> BOOL;
}
unsafe extern "stdcall" {
    pub fn FT_W32_PurgeComm(ftHandle: FT_HANDLE, dwMask: DWORD) -> BOOL;
}
unsafe extern "stdcall" {
    pub fn FT_W32_SetCommBreak(ftHandle: FT_HANDLE) -> BOOL;
}
unsafe extern "stdcall" {
    pub fn FT_W32_SetCommMask(ftHandle: FT_HANDLE, ulEventMask: ULONG) -> BOOL;
}
unsafe extern "stdcall" {
    pub fn FT_W32_GetCommMask(ftHandle: FT_HANDLE, lpdwEventMask: LPDWORD) -> BOOL;
}
unsafe extern "stdcall" {
    pub fn FT_W32_SetCommState(ftHandle: FT_HANDLE, lpftDcb: LPFTDCB) -> BOOL;
}
unsafe extern "stdcall" {
    pub fn FT_W32_SetCommTimeouts(ftHandle: FT_HANDLE, pTimeouts: *mut FTTIMEOUTS) -> BOOL;
}
unsafe extern "stdcall" {
    pub fn FT_W32_SetupComm(
        ftHandle: FT_HANDLE,
        dwReadBufferSize: DWORD,
        dwWriteBufferSize: DWORD,
    ) -> BOOL;
}
unsafe extern "stdcall" {
    pub fn FT_W32_WaitCommEvent(
        ftHandle: FT_HANDLE,
        pulEvent: PULONG,
        lpOverlapped: LPOVERLAPPED,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ft_device_list_info_node {
    pub Flags: ULONG,
    pub Type: ULONG,
    pub ID: ULONG,
    pub LocId: DWORD,
    pub SerialNumber: [::std::os::raw::c_char; 16usize],
    pub Description: [::std::os::raw::c_char; 64usize],
    pub ftHandle: FT_HANDLE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ft_device_list_info_node"]
        [::std::mem::size_of::<_ft_device_list_info_node>() - 100usize];
    ["Alignment of _ft_device_list_info_node"]
        [::std::mem::align_of::<_ft_device_list_info_node>() - 4usize];
    ["Offset of field: _ft_device_list_info_node::Flags"]
        [::std::mem::offset_of!(_ft_device_list_info_node, Flags) - 0usize];
    ["Offset of field: _ft_device_list_info_node::Type"]
        [::std::mem::offset_of!(_ft_device_list_info_node, Type) - 4usize];
    ["Offset of field: _ft_device_list_info_node::ID"]
        [::std::mem::offset_of!(_ft_device_list_info_node, ID) - 8usize];
    ["Offset of field: _ft_device_list_info_node::LocId"]
        [::std::mem::offset_of!(_ft_device_list_info_node, LocId) - 12usize];
    ["Offset of field: _ft_device_list_info_node::SerialNumber"]
        [::std::mem::offset_of!(_ft_device_list_info_node, SerialNumber) - 16usize];
    ["Offset of field: _ft_device_list_info_node::Description"]
        [::std::mem::offset_of!(_ft_device_list_info_node, Description) - 32usize];
    ["Offset of field: _ft_device_list_info_node::ftHandle"]
        [::std::mem::offset_of!(_ft_device_list_info_node, ftHandle) - 96usize];
};
impl Default for _ft_device_list_info_node {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type FT_DEVICE_LIST_INFO_NODE = _ft_device_list_info_node;
pub const FT_FLAGS_OPENED: _bindgen_ty_6 = 1;
pub const FT_FLAGS_HISPEED: _bindgen_ty_6 = 2;
pub type _bindgen_ty_6 = ::std::os::raw::c_int;
unsafe extern "stdcall" {
    pub fn FT_CreateDeviceInfoList(lpdwNumDevs: LPDWORD) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_GetDeviceInfoList(
        pDest: *mut FT_DEVICE_LIST_INFO_NODE,
        lpdwNumDevs: LPDWORD,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_GetDeviceInfoDetail(
        dwIndex: DWORD,
        lpdwFlags: LPDWORD,
        lpdwType: LPDWORD,
        lpdwID: LPDWORD,
        lpdwLocId: LPDWORD,
        lpSerialNumber: LPVOID,
        lpDescription: LPVOID,
        pftHandle: *mut FT_HANDLE,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_GetDriverVersion(ftHandle: FT_HANDLE, lpdwVersion: LPDWORD) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_GetLibraryVersion(lpdwVersion: LPDWORD) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_Rescan() -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_Reload(wVid: WORD, wPid: WORD) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_GetComPortNumber(ftHandle: FT_HANDLE, lpdwComPortNumber: LPLONG) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_EE_ReadConfig(ftHandle: FT_HANDLE, ucAddress: UCHAR, pucValue: PUCHAR) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_EE_WriteConfig(ftHandle: FT_HANDLE, ucAddress: UCHAR, ucValue: UCHAR) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_EE_ReadECC(ftHandle: FT_HANDLE, ucOption: UCHAR, lpwValue: LPWORD) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_GetQueueStatusEx(ftHandle: FT_HANDLE, dwRxBytes: *mut DWORD) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_ComPortIdle(ftHandle: FT_HANDLE) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_ComPortCancelIdle(ftHandle: FT_HANDLE) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_VendorCmdGet(
        ftHandle: FT_HANDLE,
        Request: UCHAR,
        Buf: *mut UCHAR,
        Len: USHORT,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_VendorCmdSet(
        ftHandle: FT_HANDLE,
        Request: UCHAR,
        Buf: *mut UCHAR,
        Len: USHORT,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_VendorCmdGetEx(
        ftHandle: FT_HANDLE,
        wValue: USHORT,
        Buf: *mut UCHAR,
        Len: USHORT,
    ) -> FT_STATUS;
}
unsafe extern "stdcall" {
    pub fn FT_VendorCmdSetEx(
        ftHandle: FT_HANDLE,
        wValue: USHORT,
        Buf: *mut UCHAR,
        Len: USHORT,
    ) -> FT_STATUS;
}
